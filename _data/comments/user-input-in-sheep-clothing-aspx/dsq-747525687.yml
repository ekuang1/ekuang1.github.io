id: dsq-747525687
date: 2008-07-08T19:42:54.0000000-07:00
name: Francois Ward
avatar: https://disqus.com/api/users/avatars/Francois Ward.jpg
message: "<p>I'm the one who had posted the original comment after Stephen's story. At first, I was reconsidering hitting submit, because as you pointed out, a lot of the so called \"server variables\" are really coming from the request (let say, the browser's user agent), and can be spoofed, thus it isn't a security issue.<br>But the reason I still posted it, was exactly what Troy Goode mentionned: many of the server variables come from the -server-, and -cannot- be spoofed (well, not by a client anyway). And now, using this method, they can.<br>I honestly keep getting the impression that ASP.NET MVC is remaking a ton of mistakes that were the reason ASP.NET gained popularity in the first place over PHP and whatsnot. Remember the days where you could spoof any PHP variable from query string, because on most install they were mapped that way by default? This isn't -nearly- as bad, but its the same idea. As with PHP's formerly default configuration (its not anymore for a freagin reason!), programmers won't (and shouldn't!) need to worrie about the implementation unless they explicitely request to do so.<br>In ASP.NET's web forms, with request validation at on, a user cannot use javascript to insert an extra element in a listbox, select it, and submit the form: the listbox is a wrapped control, and I shouldn't have to worrie about it. If however, I explicitely disable request validation, or use a normal SELECT element, then it is under my control, and I have to worrie about it. If I use an SQLCommand object with SqlParameters, I shouldn't have to worrie about SQL Injection. If I make my own strings, concatenated, then I should. <br>So, to follow with this...If I use your wrapped version of the server variables, I should only have to worrie about server variable security (which ones are server, which ones are client), not that a cookie could overlap a server-side variable.<br>May a suggest an Attribute based approach or something?<br>Foo([Server]string HTTP_WHATEVER, [Cookie]string somestuff, [Auto] more stuff)<br>That way if I want to shoot myself in the foot, I have to explicitely pick Auto, and it is self documenting to boot!</p>"
