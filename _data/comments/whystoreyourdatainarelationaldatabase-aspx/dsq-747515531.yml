id: dsq-747515531
date: 2007-03-13T21:35:24.0000000-07:00
name: Therac-25
avatar: https://disqus.com/api/users/avatars/Therac-25.jpg
message: <p><br>Random thoughts from someone more about ideas...<br>I've been looking around at object databases for the last little while, and nothing I've found even comes close to being useful as a replacement for an RDBMS in that space. <br>One of the things I think that's not useful is the idea of an object database as simply a way to serialize objects to a different place.  Unfortunately, that seems to be what the majority of object databases are.<br>What we need in this case is a way to store data in a form that maps naturally to an object representation, but is independent of language.  A few of the things that would be key factors are:<br>   * The ability to represent inheritance<br>   * A persistent connection scheme the doesn't have the overhead of SQL or another relational representation so that data can reasonably be accessed on demand.<br>   * A query mechanism that maps well to the object representation in a given language -- this being probably the biggest challenge in the general case.  SQL needs to be tossed.<br>   * A way to handle locking of object records -- perhaps a "check out" paradigm?<br>   * Most importantly, a way to express operations on sets of objects independent of their physical storage or language of origin.  <br>The thing is, you might be able to do this in an RDBMS (I know PostgeSQL supports table inheritance), but you'd need to replace the SQL interface with something that can talk about objects, not about relations.<br>What I think is damaging the idea is how closely most object databases tie themselves to the representation of Java-like objects.  I, anyway, want a database that can store object state in a way that I can recreate an isomorphic object in any language environment. Quickly.</p>
