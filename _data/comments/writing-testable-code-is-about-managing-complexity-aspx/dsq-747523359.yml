id: dsq-747523359
date: 2007-11-14T02:05:05.0000000-08:00
name: Travis Illig
avatar: https://disqus.com/api/users/avatars/tillig.jpg
message: <p>I might actually argue that design for testability doesn't help manage complexity.  That is, the word "manage" is my sticking point, where "manage" means "to handle or direct with a degree of skill" (per MW Online Dictionary).<br>Design for testability generally causes interface explosion, which just adds to the number of moving parts and, thus, increases the complexity rather than helping you with it, regardless of the fact you have tests.  It also has generally adverse effects on encapsulation, which is problematic if API is a deliverable.<br>Managing complexity, to me, sort of implies that it helps you to keep complex things simple, or more controlled, or at least more intelligible, and that's totally not what actually happens.<br>Maybe it's semantics, but I think it's more accurate to say that designing for testability helps you <em>maintain</em> complexity.  That is, your code may be complex, but you'll be more easily able to verify when things break as the complexity grows.<br>(For the record, I'm all about testing code, but generally the stuff I work on can't afford the lack of encapsulation or the interface-for-nearly-every-object design that common code designed for testability creates.  How easy would the .NET framework be to pick up and use if they designed it like that?)</p>
