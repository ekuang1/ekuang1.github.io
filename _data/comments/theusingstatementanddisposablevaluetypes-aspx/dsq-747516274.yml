id: dsq-747516274
date: 2006-08-11T12:51:58.0000000-07:00
name: Aaron Lerch
avatar: https://disqus.com/api/users/avatars/Aaron Lerch.jpg
message: "<p>Interesting... if you use <a href=\"http://www.aisto.com/roeder/dotnet/\" rel=\"nofollow noopener\" title=\"\">Reflector</a> to decompile UseMyStruct into C# it doesn't translate back into a using statement (as it does if a reference type is used), but rather directly into the try/finally that \"using\" is essentially an alias for.  This is confusing to me since both a value and reference type that are wrapped in the using keyword ultimately end up at this IL:<br>callvirt instance void [mscorlib]System.IDisposable::Dispose()<br>I think the answer lies in this IL statement:<br>L_0020: constrained NeverLockThis.MyStruct<br>From the documentation for <a href=\"http://msdn2.microsoft.com/en-us/library/system.reflection.emit.opcodes.constrained.aspx\" rel=\"nofollow noopener\" title=\"http://msdn2.microsoft.com/en-us/library/system.reflection.emit.opcodes.constrained.aspx\">System.Reflection.Emit.OpCodes.Constrained</a>:<br>The constrained prefix is designed to allow callvirt instructions to be made in a uniform way independent of whether thisType is a value type or a reference type.<br>When a callvirt  method instruction has been prefixed by constrained  thisType, the instruction is executed as follows:<br>    * If thisType is a reference type (as opposed to a value type) then ptr is dereferenced and passed as the 'this' pointer to the callvirt of method.<br>    * If thisType is a value type and thisType implements method then ptr is passed unmodified as the 'this' pointer to a call  method instruction, for the implementation of method by thisType.<br>    * If thisType is a value type and thisType does not implement method then ptr is dereferenced, boxed, and passed as the 'this' pointer to the callvirt  method instruction.</p>"
