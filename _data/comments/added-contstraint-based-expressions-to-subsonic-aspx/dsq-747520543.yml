id: dsq-747520543
date: 2007-05-23T04:53:50.0000000-07:00
name: Dave
avatar: https://disqus.com/api/users/avatars/Dave.jpg
message: "<p>Why not just implement LINQ to Subsonic? Ayende did this for NHibernate and it seemed pretty straight-up.<br>The Catch-22 (33?) w/ a Query Object pattern is: <br>1. If you go string based it is (+) shorter and more easily made dynamic (e.g. feed this input value into the Where object constructor's field argument) but (-) breaks automatic refactorings (ReSharper, Refactor, VS). <br>2. If you go with constant classes for table and column names these (-) your code become looooong and (+) automated refactorings come back. The last (-) becomes significantly compounded by a Fluent Interface, e.g. This().And().That().Or().TheOtherThing()<br>3. If you go with LINQ to Subsonic it (+) gives you very \"natural\" syntax that is type safe but (-) dynamic-type queries (might be, not sure) are harder than 1. and (-) is a bit harder to implement.<br>Of course there's probably no harm in having two Query Objects for different purposes. LINQ to Subsonic would be a tasty thing indeed, but, seriously, why bother until fx 3.5 hits the streets? I'd say that you could probably find a design that lets you do both 1 and 2... maybe with a built-in validation against string-based inputs?</p>"
