id: dsq-747529662
date: 2009-08-17T12:28:00.0000000-07:00
name: The Jay Mann
avatar: https://disqus.com/api/users/avatars/The Jay Mann.jpg
message: <p>After reading the included document, this seems like a great tool.  However, after noticing that it chooses the display format based on a query string parameter, this reminded me of something I was thinking about just a few hours prior.  Why not use the Accept header to determine the output type.  This allows not just a single format type to be returned, but rather a list of possible types sorted by preference, and simply throwing a 406 if the list of types aren't supported. For example, a client may prefer to recieve JSON data, but can work with XML or RSS data if necessary, thus can set Accept to application/json,text/xml;q=0.9,application/rss+xml;q=0.2.  This would suggest returning JSON by preference, XML otherwise (or if the service really prefered XML), RSS only if absolutely necessary, and an HTTP 406 assuming the service doesn't support JSON, XML, or RSS.<br>The only issue is when applying this to the general purpose case.  FireFox web browser seems to have very sane values for Accept when retrieving from the addressbox supplied URL (text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 first give me HTML or XHTML, if not, maybe XML, or anything else otherwise).  Chrome has a fairly decent list (application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5  XML as top priority!?  HTML lower priority than plain XML!? that'll cause a few issues).  IE gives a very weird list (image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/<a href="http://vnd.ms" rel="nofollow noopener" title="vnd.ms">vnd.ms</a>-excel, application/msword, */*  uhm... yeah.....).  The big issue though is the Windows RSS Platform, which only sends a */*, which would make it impossible to detect RSS or Atom rather than regular HTML.  I'd assume those issues would present show stoppers to such a method (why use a technology that, while it's done the way it's supposed to be done, doesn't work?)  I'd still like to see support for this method, as it does make a bit more sense.  Maybe even if such were to catch on, clients will better support it.... maybe...</p>
