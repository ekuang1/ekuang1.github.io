id: dsq-747529689
date: 2009-08-20T22:47:00.0000000-07:00
name: Piers Lawson
avatar: https://disqus.com/api/users/avatars/Piers Lawson.jpg
message: <p>Thanks for the extra information. The ability to overload POST is good, though (for non-browser clients) you appear to only look at the X-Http-Method-Override header... why not also look at the <br>querystring for an override? Regurgitating from Richardson and Ruby "A client that doesn't support PUT and DELETE is also likely not to support custom HTTP request headers." <br>Along the same lines, if I read the code correctly, you only support the format=xml querystring if the client is a browser. Why restrict this to browsers only? The same argument stands from above; some clients can't support changing the headers. Besides which, putting details of the representation in the URI makes it more addressable, which I prefer.<br>All in all then, I think it is a good start. I would still need a way of transforming data before it is transmitted and transform it on reception... this is not just to add links, it allows the internal and external representations to evolve independently. For XML I used <a href="http://shouldersofgiants.co.uk/Blog/post/2008/12/31/Creating-a-RESTful-Web-Service-Using-ASPNet-MVC-Part-14-e28093-Connectedness.aspx" rel="nofollow noopener" title="http://shouldersofgiants.co.uk/Blog/post/2008/12/31/Creating-a-RESTful-Web-Service-Using-ASPNet-MVC-Part-14-e28093-Connectedness.aspx">XSLT and an XsltExtension</a>. The XsltExtension used UrlHelper.Action to generate the link from the routing table. For <a href="http://shouldersofgiants.co.uk/Blog/post/2009/01/25/Creating-a-RESTful-Web-Service-Using-ASPNet-MVC-Part-15-e28093-Adding-Connectedness-to-JSON.aspx" rel="nofollow noopener" title="http://shouldersofgiants.co.uk/Blog/post/2009/01/25/Creating-a-RESTful-Web-Service-Using-ASPNet-MVC-Part-15-e28093-Adding-Connectedness-to-JSON.aspx">JSON I used JavaScriptConverters</a>.<br>If you address these issues you could have a convert! When do you think this could become part of the main ASP.Net MVC? Or would it always be standalone?</p>
