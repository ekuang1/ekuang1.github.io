id: dsq-757930151
date: 2013-01-06T10:26:44.0000000-08:00
name: Shvedov Alexander
avatar: https://disqus.com/api/users/avatars/controlflow.jpg
message: <p>Hi, I'm developer at JetBrains ReSharper team and we are using R# itself to statically verify all the reference type usages and detect all the possible null dereferencings.</p><p>To be efficient and precise, nullness inspection requires annotations a lot (just like in Spec#, but with standard .NET attributes [NotNull]/[CanBeNull]). Annotations are kind of extension for .NET type system, used by R# to "typecheck" all the reference types usages (and nullable types too). We are shipping packs of annotations for BCLs with ReSharper and users may annotate their projects too (just by declaring [NotNull]/[CanBeNull] attributes). We are using this annotations even in public surface (since our SDK developers are R# users :))).</p><p>Benefits:<br>- we have pretty HUGE codebase and pay ZERO cpu cycles for silly null checks. This is critical for tools like R# with a LOT of code executing every time users typing single character in VS editor<br>- everything is statically proven to be correct, R# immediately forces user to check for null before calls where needed<br>- nullness inspection are like very limited/specialized CodeContracts running in a real time immediately after every code change<br>- nullness annotations can be easily erased from release version assemblies if you want (with [Conditional] attribute) so you can pay zero metadata bytes<br>- explicit arguments checks looks noisier than [NotNull]/[CanBeNull] annotations on parameters/return values/fields</p><p>Disadvantages:<br>- code with [NotNull]/[CanBeNull] still looks noisier than code without checks at all<br>- possible violations of nullability are just R# warnings, projects still compiles fine<br>- R# can't prove nullness in some really complex situations and may force you to check some variable one more time<br>- methods for custom null checks like MySuperCoolWay.ToCheckForNull() should be annotated to make R# known about null-checking behavior<br>- ReSharper is required :)</p><p>Why we do not use IL weavers:<br>- build time is critical for projects of R# scale, weavers takes to much time (ccrewrite from CodeContracts is so much slow, for example)<br>- why ever emit null checks if everything can be proven statically? :)))</p>
