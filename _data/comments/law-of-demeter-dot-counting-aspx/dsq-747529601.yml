id: dsq-747529601
date: 2010-11-14T18:15:21.0000000-08:00
name: ADK
avatar: https://disqus.com/api/users/avatars/ADK.jpg
message: <p>Good coverage of the LoD argument.  I would go on to point out that the suggested "fixes" to LoD violations that are usually covered in such discussions don't really cover the bases.  IMHO, the tenet "tell, don't ask" leads us toward a solution more in keeping with the spirit of the law.<br>e.g.  <code>man.getWallet().getMoney(double amount)</code> would become <code>man.pay(Payee payee)</code> where Payee is an interface implemented by the Paperboy.  In fact, it may even be implemented by the Paperboy's Wallet, which he passes to the Man.  The Man neither knows nor cares - which is kind of the point.<br>To apply this to <code>Order.getCustomer().getName()</code> we have to think about what we plan to do with the Customer's Name.  Are we just displaying it somewhere?  If so, perhaps <code>order.display(OrderDisplay display)</code> would be an alternative solution.  You would implement the OrderDisplay to do what you wanted to do with the order details.  <br>IMHO, this solution is really what the LoD should lead us towards.  I should also point out that this will not always be "better" than the LoD violation, as it can tend to make the class take on too many responsibilities.  e.g. is it really the job of an Order to display itself?  Perhaps it is in your model - or perhaps not.  Some judgement is required.<br></p>
