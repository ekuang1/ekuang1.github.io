id: dsq-747529608
date: 2012-02-21T14:20:52.0000000-08:00
name: James
avatar: https://disqus.com/api/users/avatars/James.jpg
message: <p>Good summary.<br>As with all software design principles, LoD is mostly a good suggestion.  For most internal method calls, if the object is purposefully tightly coupled to another object (by design, where they are separate objects conceptually, but not really decoupled functionally), violating LoD can be OK, because it wouldn't really be able to decouple anything without creating a sea of objects that "don't make sense" to most people.  For external calls, LoD really ought to be followed, because it is far too easy to provide unseen security holes by sending an entire object, as opposed to a specific set of data that can be verified as secure.<br>The page view case is more in the "internal" category, since it is still local code, and some items like reports are intrinsically bound to the underlying data, no matter how many layers you put between the view and the data.  But if there are many reports that look at similar data, it can make sense to centralize that aspect of the data model, and create a specific viewmodel that flattens it out for each slightly different report.  That way, if the underlying data structure changes, you only need change the properties in that single viewmodel, instead of in each of the dozens of reports that reference it.</p>
