id: dsq-747518941
date: 2007-03-05T11:17:03.0000000-08:00
name: Micah Dylan
avatar: https://disqus.com/api/users/avatars/Micah Dylan.jpg
message: "<p>Old school epiphany - I used to write statistical software in C (on DEC OSF) and we used a lot of recursive functions. <br>Looking at newfangled code like this example just made me realize the main reason why we used so much recursion back then. In C, you didn't have a bunch of fancy dynamic data structures like the Stack type in .Net: C arrays and other memory structures are all static. In other words, you have to know their size AT COMPILE TIME. <br>What's a programmer to do? Well you take advantage of the fact that the stack frame is itself a dynamic data structure created for you by the compiler. If you don't know how many elements of something you may need to check  and/or store while processing at run time a recursive function would cover many cases and you could avoid dealing with nasty dynamic data structures (nasty in C anyway - malloc anyone?). So we recursed the hell out of everything. Probably more than we should have. Please don't send me any my of my code from those days if you have it; I was young and knew not what I did!<br>So here's a question - is there really a good reason why you'd want to use recursion (and the implicit stack) rather than explicit iteration with an explicit stack given that you (a) achieve the same effects, (b) the latter is usually more performant, (c) an explicit stack is probably easier to read and maintain than using the implicit stack set up by the CLR?<br></p>"
