id: dsq-747528837
date: 2009-04-16T21:29:00.0000000-07:00
name: Erik van BRakel
avatar: https://disqus.com/api/users/avatars/Erik van BRakel.jpg
message: <p>Phil,<br>I recently started reading Fowler's Refactoring book (or is Tome more fitting?). In the introduction of the first chapter he mentions the way he approaches the samples in the books. Basically what he's saying boils down to this:<br>- He tried various approaches, from very simple to complex;<br>- When he tried to use even the most moderate form of a complex sample, his chapters would reach well over 100 pages each;<br>- When he tried simple samples, he felt the code didn't really show the advantages of the methods he discusses.<br>What he did was just instruct his audience (aimed at semi to very professional programmers) to view the samples in the context. Create a background story for the sample, describe the overview of the system it's used in and work on isolated samples. By looking at the samples in that context, or overview if you will, the samples suddenly make a lot of sense. I don't think I'd view them like that if he didn't mention it.<br>So, to add to your sample code definition, I agree that it should only focus on the important part. But a big part of that is highlighting the important things (bold face?) pushing the less important things to the side. If that's what people are doing, I think a lot of samples make a LOT more sense. Also, applying the same sample in more than one case should improve many samples out there.<br>All in all though, I think the samples for the .NET framework are not that bad. If you compare them to, for instance, the samples available for PHP, there's a world of difference.</p>
