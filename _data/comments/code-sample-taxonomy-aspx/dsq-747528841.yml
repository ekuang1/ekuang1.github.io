id: dsq-747528841
date: 2009-04-16T22:24:00.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>@Joe Well I think Oxite is one counter example. They were actually deployed on the "sample" app before releasing. Thus they had to and did fix it later? Is that acceptable?<br>@Everyone The point of this post isn't to defend any particular sample. In fact, much of it is to spur thought externally and internally about how we go about doing this. I really think that it's a surprise to those on the inside when people trash samples so vigorously. I hope my post helps clarify to internal people why the community feels so strongly about it.<br>At the same time, I want to ask questions so we can improve the process.<br>For example, I think the Kobe team in their minds were trying to demonstrate the concept of building an Web 2.0 architecture consisting of multiple applications working together, MVC was simply an ends to <em>that</em> means. They were brand new to ASP.NET MVC and weren't seeking to build a reference ASP.NET MVC application.<br>But based on the reaction, I think the lesson here is (and this is partly the question I'm asking in this post):<br><strong>People don't make the distinction between samples and reference apps when it comes from Microsoft.</strong><br>This team was well aware of the Oxite debacle. They told me they weren't promoting this app as best practices or reference app. However, the lesson here is that even in good faith, it didn't turn out well.<br>@Karl what do you think the solution is? For the sake of argument, let's assume the next team comes along and they really believe they're writing good code and want to release a sample. What should the process be? I can't send an email to all employees saying (Hey! Learn SoC, DRY, etc... or don't release your sample).<br>Wish I could. But I can't.<br>So a lot of groups at Microsoft (it's a big company) are going to learn the hard way. They'll release something thinking it's fine, and the community will review it and point out the flaws, and then hopefully (as in the Oxite case) they'll revisit and fix it.<br>It sounds to me that nobody feels this is an acceptable process for MS to learn and improve. Part of my question is whether there's a better way.<br>Should we have an internal review process for every sample? I don't think that'll scale. Kobe did present some of their code to me and I gave them feedback. I didn't do a line by line code review, though. I didn't play around with their source myself. I wish I had, but having me and my team review every sample MVC app is not scalable.<br>Do you have something else in mind?</p>
