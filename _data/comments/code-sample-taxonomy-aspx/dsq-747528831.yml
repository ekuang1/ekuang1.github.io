id: dsq-747528831
date: 2009-04-16T19:08:00.0000000-07:00
name: Karl
avatar: https://disqus.com/api/users/avatars/Karl.jpg
message: <p>The problem with a complex taxonomy is that it gives an easy out for people to write shitty code, as opposed to making them accountable. Maybe we should stop trying to play word-games and call a spade a spade. <br>In an iterative setting, a prototype is simply a feature-poor version of the final product. A prototype should be unit tested, should be cleanly written, should following DRY and SOLID principles. You either write clean code and adhere to best practice, or you don't. I don't know of any programmer who writes really bad code in one context, and then beautiful code in the next. <br>I see:<br>-Utility code/throwaway code like 1 time importers or stuff you write in SnippetCompiler.<br>-Real Code<br>The level of DRY/SOLID/Unit Tests of Real Code should be proportional to its complexity &amp; size. I mean, if you start off with a rough method you might have some ugliness, but you better clean it the fuck up before you add a 2nd class. And then before you start referencing a different layer, you better add your unit tests and start thinking about switching to TDD. <br>The idea that you can "prototype" anything complex (say that has a UI and/or hits the DB) without caring much for design and craftsmanship is foreign to me (unless you are using some scaffolding code, but then we're talking about a few lines of boilerpoint code, as opposed to custom code).</p>
