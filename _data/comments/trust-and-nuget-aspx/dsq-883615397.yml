id: dsq-883615397
date: 2013-05-03T12:40:00.0000000-07:00
name: Sean Woodward
avatar: https://disqus.com/api/users/avatars/Sean Woodward.jpg
message: <p>Phil's post touches on a very deep issue. One I believe has no real solution in site (on this I hope to be proved wrong). NuGet and other package managers create an interesting point of vulnerability. Developers learn early not to repeat themselves or to solve problems already solved. Naturally, we gravitate to easy to use solutions that address our needs and allow us to reach our end goals efficiently. Using a tool like NuGet, or any other package manager, allows us to tap a vast resource of solved problems, but can also expose us to subtle bugs, illusive issues, or worse vulnerabilities or exploits both explicit and intrinsic. Unfortunately NuGet installs compiled binaries, I assume many, but at least some, come without a true list of dependencies. A convenience yes, but also a potential nightmare for those that are not most vigilent. The tradeoff for that convenience is not always immediately evident.</p><p>The Dependencies section of a NuGet package can be very misleading. While a package may report, "This package has no dependencies", it's payload can be quite a different story. Packages can include any number of dependencies without our knowledge. ILMerge allows multiple libraries to be bundled into a single library. Many of our favorite packages, even those distributed by trusted Microsoft authors, use this method to wrap dependencies in a single library. The issue now becomes not just how much do we trust the author of the package, but how much do we trust the author's trust in the libraries included and embedded without our knowledge, and so on. What our packages need is a something similar to a "Nutrition Facts" label. This information should include a list of all libraries required and included with the package. NuGet addresses the first but does not deliver the latter. Additionally, I like to see a set of criteria identifying the checks the library has passed should be included with the package's "Nutritional Facts". These facts would provide top-level indicators and categories measuring the reliability or trustworthiness of a given package.</p><p>Phil says, "At least with NuGet, when you install a package it doesn’t require elevation. If you install an MSI, you’d typically have to elevate privileges." If the privileges are not required or present during development, often these privileges will be required during installation. Therefore, elevation is many times merely just deferred.</p><p>I agree package signing is not a solution in and of itself, but a better "Ingredients List" and "Nutritional Facts" of a given package would be a better approach.</p>
