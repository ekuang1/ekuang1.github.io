id: dsq-806208121
date: 2013-02-20T15:01:33.0000000-08:00
name: Mike McG
avatar: https://disqus.com/api/users/avatars/lunalot.jpg
message: "<p>Although you seem entrenched in opposition of digital signatures, I will argue for it anyway. :) Digital-signing leverages the entire ecosystem and conventions of x.509 PKI. Publishers are accustomed to it (publishing to app stores, using ssh/github, securing http connections), and while signing certificates is not (always) free, they aren't outrageously expensive (free for email assurance, or $50-$100 for identity/organization assurance). People are also accustomed to chains of trust, moreso than webs of trust when it comes to computing. We encounter PKI-based trust UIs all the time, e.g. browser address bars, ClickOnce/JAWS, and MSI installs. Regardless, package signing shouldn't be \"required\". The UI issue remains but is not insurmountable: e.g. NuGet could locally verify the package certificate against locally-trusted authorities, and annotate package names with \"Email Verified\", \"Email and Identity Verified\" or \"Email, Identity and Organization Verfied\" (or a \"verification failed\" message).</p><p>Relying only on social networks ignores that this isn't what those services were intended for. Security practices with social network accounts are laxer than with handling of digital certificates. Federating trust also depends on those services being reachable, not changing their Terms of Use, and being secure themselves. For a code distribution system that can have a real impact on businesses, this doesn't seem adequate.</p><p>But even digital package signatures would be separate of code-signing on the actual assemblies. In my opinion, it would be most useful just to surface that information. This leverages even more existing mechanisms (signtool.exe and Code-Access Security) and distills the problem to the core (trusting the assembly, not the associated NuGet package or profile). The UI challenge remains, but isn't insurmountable. E.g. add a \"Signatures\" column in ListAvailable, with value either \"OK\" or 2 numbers where lower is better: \"[verify-failed]!, [unsigned]\" (yes there's an exclamation point in there). Cost for cert also remains but is not extraordinary given the benefits (Tucows resells code-signing certificates from Comodo for $75/year).</p><p>Last point: laziness/cumbersomeness shouldn't play too big a role, as these can be addressed at fixed-cost with tooling, given demand.</p><p>As you said, trust is graded, not binary. It's also generally apparent that the more trustworthy the mechanism, the higher the costs/friction. Given this, it's not clear which mechanism, or set thereof, gives the best bang for the buck. Anyway, interesting article; thanks for writing it.</p>"
