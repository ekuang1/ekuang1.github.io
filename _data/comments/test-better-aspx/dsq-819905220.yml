id: dsq-819905220
replyToId: dsq-819078625
date: 2013-03-05T03:37:19.0000000-08:00
name: Eli Weinstock-Herman
avatar: https://disqus.com/api/users/avatars/eliweinstockherman.jpg
message: <p>In counterpoint, the feature that your expensive software developers just spent 2 days finishing wasn't cheap either. Separating the testing duties tends to make for a longer delivery pipeline, so that expensive feature sits on the shelf longer and it takes longer to get anything from the start point to the customer (the faster you can do this, the more responsive the company feels, the more you can experiment w/ your customers to figure out what they want, etc). Plus, every time the responsibility for that code changes hands, it becomes more expensive for the original developer to fix anything, as they have switched gears to something else and will require that much longer to get back into the details (while putting whatever they moved on to the side on hold). It also requirs that you have much more detailed requirements or handoff processes (the tester now needs to understand all of the requirements and ancillary impacts well enough to test it now).</p><p>To me, the trade off is not worth it. The flexibility and speed to market has a value that is more then the difference of one tester (and that's assuming I hire one tester per developer), especially when you factor in the costs of working on bugs in software you had handed off (2x-10x, depending on where you are when you find it), additional processes/requirements documentation/whatever, and the additional detailed communications overhead.</p>
