id: dsq-747529753
date: 2009-08-19T05:42:00.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>@bellware Interestingly, I think the current behavior of transaction scope is weird. When I see a <code>using</code> block, I naturally think of it as defining a scope. And within that scope, something is different.<br>For example, within a <code>lock</code> statement, I expect everything inside to be governed by the lock. When you leave the lock block, I expect the lock to be released.<br>So I find it odd that I have to call transaction.Complete() at all. I kind of think it's only there to prevent the transaction from being disposed of prematurely, not sure though.<br>That's how I read the <code>Do</code> method. Everything in there is part of the transaction.<br>In fact, the original intention of the <code>Dispose</code> pattern was to delineate and dispose of a scope, not just harmful resources. At least that's what <a href="https://haacked.com/archive/0001/01/01/DifficultiesOfLanguageDesign.aspx" rel="nofollow noopener" title="Difficulties of language design">Eric Gunnerson once told me</a> ;). <br></p><blockquote><br>Not only that, the TimedLock demonstrates what the C# team had in mind with the using statement. It wasn't intended just for cleanup, but for situations just like this.</blockquote>
