id: dsq-747529738
date: 2009-08-19T01:07:00.0000000-07:00
name: Dummy Customer
avatar: https://disqus.com/api/users/avatars/Dummy Customer.jpg
message: <p>I don't like it!<br>I think that your new solution is less readable than the initial code. <br>This is an extra abstraction layer that causes the code to be less readable and also less easier to debug. <br>The debugging of your code becomes more difficult, because an exception will bubble in the Do() method. So Visual Studio will break in the Do() method. So the only way to actually see where the exception occurred is to go through the stack trace. <br>In essence, you want an exception to hit as close to the actual code that caused it. And yes, I know that can be difficult to achieve.<br>Also, Transactions are usually used in business apps. <br>All transactions usually go through a Save() method in your business app. Having multiple transactions and transaction scopes throughout a business app is usually a bad sign.<br>The Save() method is the uber method that does saving, transactions, logging, exception bubbling, translation of exception message etc.<br>Applying your solution to the Save() method will decrease that method with one line, but it will also add additional indirection and complexity where it is not needed.<br>So conclusion:<br>It's always good to think about code reduction, but it has to make sense in a real world solution and I don't see this having a real world benefit.<br></p>
