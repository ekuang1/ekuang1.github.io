id: dsq-747511877
date: 2005-06-14T22:37:00.0000000-07:00
name: haacked
avatar: https://github.com/haacked.png?size=120
message: <p>Pete, I agree that coding to principles is a good thing, but only when those Principles are well understood and when they are not followed blindly.<br><br><br><br>However, I don't believe every class should always have a corresponding interface.  Sometimes, coding to interfaces can be abused.<br><br><br><br>An interface is a strict contract to be consumed by a client who understands the interface.  This provides the much lauded goal of Polymorphism.<br><br><br><br>Ideally an interface should not have too many methods because it is a contract and once you define an interface, it is unchangeable.  If you change the interface, you may end up breaking existing clients.<br><br><br><br>Hence the reason you often see COM interfaces named ISomeInterface2 or ISomeInterfaceEx.  The original interface wasn't enough and needed to be modified.<br><br><br><br>However, why create an interface if the interface does not have ANY clients?  And by client, I mean any code that uses the interface in a polymorphic manner.  The extensibility argument is out because there is no extensibility point.  Also, with no client, you have no idea if your interface is well factored.  At some point, if you do add a client to it, you might be opening yourself to problems as the interface isn't well thought out.<br><br><br><br>Sometimes, an abstract base class is called for.  Sometimes a simple concrete class.</p>
