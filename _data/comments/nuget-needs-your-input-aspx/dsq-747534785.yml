id: dsq-747534785
date: 2011-04-08T00:43:40.0000000-07:00
name: Andy Alm
avatar: https://disqus.com/api/users/avatars/Andy Alm.jpg
message: <p>I work for a largish company, and for us, we have two different types of source trees.  We have our application source trees, which typically have one "blessed" solution that contains the application specific projects.  Then we have our "shared code" source tree(s), which just consist of a bunch of .csproj files that produce assemblies that are consumed by 2 or more applications.  For the application source trees, managing package dependencies at the solution level works best, because we want the whole application to be on the same version of everything.  While an application source tree might technically have more than one app in it (e.g. a console app), it can still be viewed as one cohesive unit.  <br>However, for our "shared code" source trees, solutions are irrelevent.  They can be sliced and diced however one wants, and managing packages at the solution level makes no sense there at all.  We have instances of projects in these tree's that intentionally use different versions of packages as well.<br>I hate to say it, but basically we need the flexibility for managing at both the project level, and the application (solution) level.</p>
