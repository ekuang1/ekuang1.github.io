id: dsq-747534620
date: 2011-03-19T03:33:35.0000000-07:00
name: Jes&#250;s L&#243;pez
avatar: https://disqus.com/api/users/avatars/Jes&#250;s L&#243;pez.jpg
message: '<p>We use custom model binders for decimals and to trim strings. Our default model binder is a trimming model binder:<br>    public class DefaultCustomBinder : DefaultModelBinder<br>    {<br>        protected override void SetProperty(ControllerContext controllerContext, ModelBindingContext bindingContext, PropertyDescriptor propertyDescriptor, object value)<br>        {<br>            if (value != null &amp;&amp; propertyDescriptor.PropertyType == typeof(string))<br>            {<br>                value = ((string)value).Trim();<br>                if ((string)value == string.Empty)<br>                {<br>                    value = null;<br>                }<br>            }<br>            base.SetProperty(controllerContext, bindingContext, propertyDescriptor, value);<br>        }<br>    }<br><br>And we use this model binder for decimals:<br>    public class DecimalBinder : DefaultModelBinder<br>    {<br>        public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)<br>        {<br>            if (bindingContext.ModelType == typeof(decimal) || bindingContext.ModelType == typeof(decimal?))<br>            {               <br>                return BindDecimal(bindingContext);<br>            }<br>            else<br>            {<br>                return base.BindModel(controllerContext, bindingContext);<br>            }<br>        }<br>        private object BindDecimal(ModelBindingContext bindingContext)<br>        {<br>            ValueProviderResult valueProviderResult = bindingContext.ValueProvider.GetValue(bindingContext.ModelName);<br>            if (valueProviderResult == null)<br>            {<br>                return null;<br>            }<br>            bindingContext.ModelState.SetModelValue(bindingContext.ModelName, valueProviderResult);<br>            decimal value;<br>            string valueAsString = valueProviderResult.AttemptedValue == null ? null : valueProviderResult.AttemptedValue.Trim();<br>            if (string.IsNullOrEmpty(valueAsString))<br>            {<br>                return null;<br>            }<br>            if (!decimal.TryParse(valueAsString, NumberStyles.Any, Thread.CurrentThread.CurrentCulture, out value))<br>            {<br>                var ex = new InvalidOperationException("Valor no válido", new Exception("Valor no válido", new FormatException("Valor no válido")));<br>                bindingContext.ModelState.AddModelError(bindingContext.ModelName, ex);<br>                return null;<br>            }<br>            return bindingContext.ModelType == typeof(decimal) ? value : new decimal?(value);<br>        }<br>    }</p>'
