id: dsq-747524307
date: 2008-03-04T22:13:51.0000000-08:00
name: Francois Ward
avatar: https://disqus.com/api/users/avatars/Francois Ward.jpg
message: "<p>Joe, there is a balance to be had, for sure. As pointed above by David, people are in favor of -relaxing- the backward compatibility constraints, not eliminating them. How much would we have benefited if backward compatibility was broken for ADO.NET to have it use nullable types directly? Now we have a bunch of extension methods as a crunch for it.<br>What it means, is that going that route, no matter what, with certainty, the .NET framework is doomed. It may be later rather than sooner, but be it 5 or 10 years from now, my application will, for sure, have to switch to a different framework and language, because the one I'm using now has a bunch of tricks,hacks and design choices that made it a mess to keep backward compatibility (.NET 3.5 is the best example of it...it worked this time...but if they use the same strategies next time...what a mess! Everything will be extension methods and abstract classes implemented in separate assemblies?!).<br>Thats just an example though. Its part of why .NET is so popular over Java: Java made that mistake.<br>So between having things be a mess every so version, but end up fresh and keeping up with the time, OR having no issues with backward compatibility, but having to restart from scratch in the future because .NET simply couldn't keep up with changes because of an overly conservative policy, I pick the former.</p>"
