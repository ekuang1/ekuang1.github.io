id: dsq-747531904
date: 2010-07-13T02:08:44.0000000-07:00
name: Jason Hurdlow
avatar: https://disqus.com/api/users/avatars/Jason Hurdlow.jpg
message: "<p>For those who \"don't get it\", maybe I can help:<br>The real power of Rx comes not with simple one-event situations like in the given example. For that you're correct that the traditional way works just fine, and the additional complexity of Rx is just that. Where Rx comes into its own is when you have a more complex set of events that you need to coordinate. With the ability of Rx to compose events you can dramatically simplify complex event handling scenarios.<br>Example: I had a situation where I was writing a somewhat complex hand-off from one web-hosted silverlight app to another, and it did things like \"send app2 a message, if it responds, then close yourself, if it doesn't open a browser window with that app, then wait 2 seconds and send another message, if that doesn't respond, wait 2 more seconds then....\" you get the idea. I fussed with normal event handlers, flags, timers, etc... for the better part of a day and couldn't get it quite right. That was when I stumbled upon Rx. I had it working in Rx in about 20 minutes. The code was much smaller, MUCH easier to read, and as a bonus, it worked perfectly! :)<br>That was a hallelujah moment for me, and when you eventually find yourself in that sort of a situation the lights will come on and you'll \"get it\". :)<br>Another way to look at it is that you put your event filtering \"up front\" (in a clear, concise manner) and let Rx and LINQ do all the hard work for you, and you only get called when you really need to know. Kind of like a high-powered executive who's personal assistant screens his calls, compiles messages, filters out the riff-raff, coordinates meetings, and only brings items to his attention that he really needs to know about. That's Rx.</p>"
