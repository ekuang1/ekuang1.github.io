id: dsq-747517212
date: 2006-10-10T23:11:24.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <blockquote>You should REALLY separate your unit tests from integration tests, because as your projects grow you'll have a very large number of tests.</blockquote><p><br>Hmm I have to respectfully disagree.  The count of unit tests does not necessarily require a separate assembly.  Even if I did separate them, the unit test assembly could still grow very large.  Would I then separate my unit tests into multiple assemblies?<br>As I pointed out, TDD.NET and MbUnit allow you to run tests in a namespace.  I believe that solves this problem. It's a matter of convention. If my team learns to run the unit test namespace while developing, and then run all tests (unit + integration) before commiting, that's satisfactory.<br></p><blockquote>Your recommendation above breaks good namespacing guidelines.</blockquote><p><br>The namespace guidelines you speak of are for public APIs, code that is referenced by other assemblies.  For example, if you look at all other subtext assemblies, they follow the conventional namespace conventions.<br>The unit test assembly is never deployed and never referenced by another assembly.  It's namespace is pretty much irrelevant.  It's essentially a "private" assembly.<br>Right now, I do happen to include "subtext" in the unit test namespace like so:<br>   <code>UnitTests.Subtext</code><br>But in proposing something new, I wanted to avoid <a href="http://www.codinghorror.com/blog/archives/000683.html" rel="nofollow noopener" title="Unnecessary namespacing">unnecessary namespacing</a>, hence the new proposal to make it very easy to only run unit tests or only run integration tests via the namespace.</p>
