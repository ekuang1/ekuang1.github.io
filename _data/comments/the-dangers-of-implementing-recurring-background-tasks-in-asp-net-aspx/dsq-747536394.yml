id: dsq-747536394
date: 2011-12-11T02:53:46.0000000-08:00
name: Professordave
avatar: https://disqus.com/api/users/avatars/Professordave.jpg
message: '<p>Hello,<br>Problem: we are getting a thread abort exception from a thread started from application_start using thread.start. We are running iis 7.5 with the always running set to true, <a href="http://asp.net" rel="nofollow noopener" title="asp.net">asp.net</a> mvc 3, .net 4.0<br>One theory is that because of this explicitly started thread the system thinks that the startup code has hung and therefore aborts the thread.<br>Is there a difference between "spawning" a thread implicitly using a timer as phil does above, and "spawning" a thread explicitly using thread.start.<br>In application_start we are doing a thread.start and that thread does some work in an infinite loop.<br>We are going to try to re-write it with a timer, but there is a reason we did it this way which I will mention later.<br>We are getting thread abort exception on that thread. It looks like we get this after the amount of time corresponding to the app startup timeout.<br>It looks like the thread is the restarted automatically, we think, we will do some more testing.<br>However it seems that this rarely or never happens when run from visual studio, so debugging is not straight forward, so until I add some more logging I do not know whether application_start is being called again or the thread is restarted or what.<br>The work we are doing in the infinite loop involves a blocking call, so there is no need for a periodic timer.<br>We are getting messages from an Oracle advanced queue. The oracle .net routines to get messages include a blocking call. Using this blocking call ensures that we get messages when they arrive and that when there are no messages there is no wasted CPU that you get with busy polling.<br>Since the amount of work is variable, sometimes many messages, sometimes no messages, a periodic timer might cause issues, either we might get a new thread before the first thread completes or not processing messages fast enough, depending on the duration of the timer.<br>We could re-write the code to use a one shot timer that is called at the end of the function and have the function run once instead of running for ever.<br>We changed the timeout for the oracle API call from infinite to something much less. We noticed, at least in visual studio, that the thread would never quit if it was currently waiting in the oracle API call.<br>For example, if I touch the web.config file, so that application_end Â gets called and then apllication_start gets called again, I can see a second thread get created, but the first thread is still running. It stays alive until a message arrives, at which point it returns from the API call but then it gets an exception, I think because the thread is not really still alive.<br><br>Can anyone help us to understand conceptually what is happening?<br>Thanks in advance.</p>'
