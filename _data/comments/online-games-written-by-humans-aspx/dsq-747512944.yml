id: dsq-747512944
date: 2005-08-29T04:45:00.0000000-07:00
name: optionsScalper
avatar: https://disqus.com/api/users/avatars/optionsScalper.jpg
message: <p>Mr. Haacked,<br><br><br><br>This is similar in many respects to the side-channel attack in cryptology.<br><br><br><br><a href="http://en.wikipedia.org/wiki/Side_channel_attack" rel="nofollow noopener" title="http://en.wikipedia.org/wiki/Side_channel_attack">http://en.wikipedia.org/wiki/Side_channel_attack</a><br><br><br><br>The most recent high-profile side-channel attack on AES was a timing attack and my write-up is here (with links to schneier and other security guys):<br><br><br><br><a href="http://www.jjbresearch.org/acs/blogs/optionsscalper/archive/2005/05/17/30.aspx" rel="nofollow noopener" title="http://www.jjbresearch.org/acs/blogs/optionsscalper/archive/2005/05/17/30.aspx">http://www.jjbresearch.org/acs/blogs/optionsscalper/archive/2005/05/17/30.aspx</a><br><br><br><br>Schneier mentions the timing attack on SSL here (from 2003):<br><br><br><br><a href="http://www.schneier.com/crypto-gram-0303.html" rel="nofollow noopener" title="http://www.schneier.com/crypto-gram-0303.html">http://www.schneier.com/crypto-gram-0303.html</a><br><br><br><br>I agree with you (because you are always right; how could I argue?).  This is a difficult problem, but there are many ways to deal with masking of timing.  The simplest is to do the following:<br><br><br><br>1.  Benchmark the implementation over a significant sample size (10,000 runs or some significant number).<br><br>2.  Find the distribution of the implementaion timings.<br><br>3a.  If the distribution is normal (random normal), proceed to step 4.<br><br>3b.  If the distribution is not normal, determine distribution and decide whether to scale/normalize the distribution.  If an alternative distribution is chosen, proceed to step 27.<br><br>4.  Choose a small value (pad) within one sigma of the normal distribution and add that to the mean value of the timing.<br><br>5.  Write timing code that provides for a random normal distribution within one sigma of that mean + pad (using a crypto-ready PRNG, of course).<br><br>. . .<br><br><br><br>OK, maybe it's not so simple, but it is definitely within the capabilities of most programmers.<br><br><br><br>This example will still present biased timing results (that can be hacked), but will not exhibit the basic outliers and linear timing approximations that standard algorithms provide at runtime.<br><br><br><br>As for your friend, I say exploit away.  The vendor has a responsibility to make the games fair.  If they don't hire competent programmers that know this kind of stuff, they deserve to have people reach into their pockets and take their money.  I'm guessing that there are other available exploits at this site as well.  There are plenty of observable facts that are subject to exploitation.<br><br><br><br>Now where are those Poker Bots . . .<br><br><br><br>---O<br><br></p>
