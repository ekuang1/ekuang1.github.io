id: dsq-857933951
date: 2013-04-09T13:29:36.0000000-07:00
name: Ovidiu Caba
avatar: https://disqus.com/api/users/avatars/ovidiu_caba.jpg
message: "<p>Hi Phil,</p><p>I wonder how would you test an interface. Let's propose the following sample scenario:</p><p>interface ISimpleInterface<br>{<br>//This function always returns 1<br>int GetX();<br>}</p><p>class C1 : ISimpleInterface<br>{<br>int GetX() {return 1;}<br>}</p><p>class C2 : ISimpleInterface<br>{<br>int GetX() {return 2;} //intentional wrong implementation<br>}</p><p>For a few days I tried a lot of approaches, but none of them work for me. The last one is this:</p><p>public abstract class ISimpleInterfaceUnitTest<br>{</p><p>   public ISimpleInterface Instance;</p><p>   public abstract class GetX()<br>   {</p><p>[TestMethod]<br>      GetXShouldReturn1()<br>      {<br>Assert.AreEqual(1, Instance.GetX());<br>      }<br>   }<br>}</p><p>public class C1UnitTest : ISimpleInterfaceUnitTest<br>{</p><p>[ClassInitialize]<br>public void InitializeClass()<br>{<br>ISimpleInterface Instance = new C1();<br>}</p><p>public class GetXUnitTest : GetX<br>{<br>}<br>}</p><p>public class C2UnitTest : ISimpleInterfaceUnitTest<br>{</p><p>[ClassInitialize]<br>public void InitializeClass()<br>{<br>ISimpleInterface Instance = new C2();<br>}</p><p>public class GetXUnitTest : GetX<br>{<br>}<br>}</p><p>The problem is that the methods InitializeClass from C1UnitTest and C2UnitTest are never called. If I want this tests to work correctly I have to copy the InitializeClass method in every subclass of C1UnitTest and C2UnitTest, but I don't want to do that, I don't want to duplicate the code.</p><p>What approach would you suggest for such scenario?</p><p>Thank you in advance,<br>Ovidiu</p>"
