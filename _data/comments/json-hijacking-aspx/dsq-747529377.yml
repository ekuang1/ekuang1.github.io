id: dsq-747529377
date: 2009-06-26T04:47:00.0000000-07:00
name: Pat Gannon
avatar: https://disqus.com/api/users/avatars/Pat Gannon.jpg
message: "<p>My 2 cents is that I strongly disagree with this: \"It seems to me that to be secure by default, the default behavior for accessing JSON should probably be POST and you should opt-in to GET\".<br>This is an abuse of HTTP (to use HTTP POST to GET data) and will disable scenarios where caching is desirable and will make your JSON method less compatible with generic AJAX components that are designed to work with any RESTful resource.<br>I think that \"chang[ing] JsonResult to require POST by default\" is a bad idea.  Not only are you making it making it so that accessing an MVC/JSON action via jQuery would require an extra bit of hacky code, you are also significantly reducing one of the advantages of ASP.NET MVC, which is that it is currently the best way (IMO) to make RESTful websites on the .NET platform.  That is certainly one of the reasons that I give when folks ask me why they should use MVC.<br>My vote, obviously, is NO on that solution.  I think it would be better to put the responsibility of security on the developer (especially for a somewhat remote scenario like this given that the user has to click on a nefarious link AND be logged into a particular site that the attacker is targeting) and allow them to decide what solution is proper for this case (if any at all).  I think in general web developers shouldn't be lulled into a false sense of security by using a framework which touts itself as being \"secure by default\".<br>I'm a little confused about the alternative of putting your JSON in an object rather than an array.  So will wrapping a JSON array in a top-level JSON object fix this, or will the vulnerability be present if there's an array anywhere in your JSON?  If a top-level object fixes this, why doesn't the default top-level \"d\" property you mentioned solve the issue?  If any solution along these lines is possible, I would think that would be highly preferable to the POST hack. ;-)<br>Take care, and keep up the good work!  I'm really loving this MVC stuff! :-)<br>Pat Gannon</p>"
