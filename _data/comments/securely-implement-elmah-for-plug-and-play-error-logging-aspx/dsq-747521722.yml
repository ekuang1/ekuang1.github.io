id: dsq-747521722
date: 2007-07-24T15:35:24.0000000-07:00
name: Atif Aziz
avatar: https://disqus.com/api/users/avatars/Atif Aziz.jpg
message: <p>@Haacked - Couldn't have positioned ELMAH better. It's definitely not a general-purpose logging framework nor one for instrumentation. It only logs <em>unhandled exceptions<em> in a non-invasive way (speaking code-wise). I usually discourage people from using it to log errors in their <code>catch</code> blocks because that purpose is served better by existing tracing facilities and frameworks and often by acutally handling the offending case gracefully in code.<br>@Ivan - Also bear in mind that ELMAH was originally written for ASP.NET 1.1, but I think <a href="http://www.flanders.co.nz/blog/archive/2006/07/20/event-logging-made-easy-in-asp.net.aspx" rel="nofollow noopener" title="http://www.flanders.co.nz/blog/archive/2006/07/20/event-logging-made-easy-in-asp.net.aspx">you already knew that</a>. The new beta runs all the way across the board down to 1.0. That alone can help many of us who have to keep old ASP.NET applications humming in production yet cannot afford to touch the code base anymore.<br>ELMAH targets as much operators and administrators in data centers as it does developers. This is reason it was designed to be pluggable, requiring (hopefully) absolutely no changes to the code base. It by no means competes with health monitoring, which became only available with ASP.NET 2.0. If you're happy with that solution, I'd stick to it. In general, however, I've seen people add ELMAH as an after-thought to an application in production because they needed more information than what their users would be telling them (which usually went along the lines of, "...and the page just broke with some odd error and then I just closed the browser"). The first reaction then is to get something up and running quickly and that's where ELMAH has been coming in. You get logging of uncaught exceptions <em>plus viewing</em> in 5 to 10 minutes. It's a rather small and proactive step towards speeding up your reactive support. :) As a longer-term solution, the application and development and support teams should definitely look into health monitoring.<br>I still continue to use ELMAH because I get web pages and RSS feeds for free in addition to logging using a rather modest configuration footprint. A very large and complex project may warrant more time investment into health monitoring, but by then you may not necessarily be the person looking into that piece. The other more subtle reason is that ELMAH is now open source. This means that it can be enhanced by the community to support cases and scenarios that you just can't always afford to sit and wait for Microsoft to provide or fix. Sometimes, you just have roll up your sleeves and at that point ELMAH can serve as a good starting point. For example, if health monitoring does not have any UI then why not just wrap an ErrorLog implementation around the aspnet_WebEvent_Events table? That way you can leverage ELMAH pages and feeds while using health monitoring for the actual logging. Both can complement each other. How smoothly this can be done has to be investigated. If anyone wants to look into that, I'm sure it'd be a broadly welcomed addition. I actually started looking into it myself when I was seeing where ELMAH could leverage ASP.NET 2.0 futher than what was available earlier. Unfortunately, it had to go on the back burner as I had to focus on getting ELMAH setup as an open source project after GDN decided to shutdown.</em></em></p>
