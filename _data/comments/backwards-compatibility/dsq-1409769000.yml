id: dsq-1409769000
date: 2014-05-29T03:37:58.0000000-07:00
name: Eli Weinstock-Herman
avatar: https://disqus.com/api/users/avatars/eliweinstockherman.jpg
message: <p>My feeling, as a consumer of these technologies, is that Microsoft has started abandoning backwards compatibility. I get that it it is hard, but the total lack of a bridge or upgrade path in many cases is a tax on the end users and it has seemed in the past 10 years or so that MS has simultaneously turned up the delivery frequency and lowered the bar for breaking changes.</p><p>Some of us have products and projects that continue to last and grow and make money across many versions of software. When a team decides to update their name space unexpectedly (Azure Storage SDK) or the upgrade path as conventions on file location and such change from version to version (MVC), etc, then they have decided that it is more important to make their own lives easier at the expense of the customer. It may be that this is for the customers own good, it may be that this is just easier for the developers, but in either case it is taxing the customers that spend developer time keeping the stack up to date instead of letting it fall into extended support and trying to innovate on 5+ year old software.</p><p>I get it, designing public SDKs and frameworks is difficult, you learn as you grow them, the world changes, etc. But giving up backwards compatibility should be a hugely painful decision. It should be made with the awareness of how much pain it will cause the very customers that are successfully using that product, and some consideration should be given to tooling or walkthroughs on making that transition from one to the next as easy as possible.</p>
