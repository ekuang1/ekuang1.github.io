id: dsq-747517016
date: 2007-05-13T11:43:23.0000000-07:00
name: Medi Montaseri
avatar: https://disqus.com/api/users/avatars/Medi Montaseri.jpg
message: <p>I like the four component versioning scheme like<br>major.minor.releaseCandidate.release or xx.xx.xx.xx<br>Basically major.minor is in the bag....mostly agreed on<br>The other two I like for the following reason.<br>Since typical software dev cycle includes development, Integration test and QA test, we can reserve major and minor for developers. So dev will deliver<br>xx.xx.01.00 to Integration Testing as release candidate 01. This instance of the code is either rejected or passed. If rejected, it goes back to dev and come out as xx.xx.02.00 and the cycle continues until xx.xx.53.00 where Integration Testing finally OK the release and the product moves forward to QA. Note that while the 3rd number is 00, it means this code is in alpha stage. And as long as the 4th number is 00 it means in beta stage. Finally the product is delivered to QA as xx.xx.53.01. QA will take a shot at the product and finally validates xx.xx.53.17<br>along the way the src is tagged with xx_xx_xx_xx as we go.<br>Here is an interesting ROI from this scheme...If I have a product that reads xx.xx.87.12 it means that Integration Testing failed the code for 87 iterations which means lots of QA upstream and it shows that the eng dept is just throwing the code over the fence without really developing good product.  <br>now onsider a product with a version like xx.xx.12.87 this means that eng just throw over the product and said its done , Integration guys were just browsing the net and saying yep..it works and finally the QA guys failed the product 87 times....<br>The only problem with this scheme is that it is a wistle blower and could cause tention in a politically charged company...<br>So I like the xx.xx.xx.xx format and that was why...<br></p>
