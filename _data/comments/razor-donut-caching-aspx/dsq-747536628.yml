id: dsq-747536628
date: 2011-12-03T22:33:06.0000000-08:00
name: Sipke Schoorstra
avatar: https://disqus.com/api/users/avatars/Sipke Schoorstra.jpg
message: "<p>I like the clean and short @cache and @nocache directives, but it's important to prevent the templating engine from becoming a specialized web page view engine. <br>But I guess that can easily be achieved by having an abstract CacheProvider that Razor depends on, with having for example both an in memory provider to support the cases where we use Razor outside of ASP.NET, as well as an ASP.NET implementation of the cache provider.<br>I agree with Paul Litwin that it should also be supported by the WebForms View Engine, and other View Engines as well. So perhaps the implementation of @cache and @nocache should be aliases to some base methods that all view engines inherit from (and all view engines should have the ability to override the default implementation, if so required). Just like the C# int and the VB.NET Integer are in fact aliases to System.Int32.<br>It's been long since I've seen WebForms syntaxtm but it could be something like: &lt;asp:nocache runat=\"server\"&gt;Username&lt;/&lt;/asp:nocache&gt;, or a directive: &lt;%nocache %&gt;Username&lt;/%&gt;<br>Other view engines could define their own tags / directives.<br>Ultimately, the directives are aliases to protected methods of their base view engine.<br>Although some argue that caching is only relevant within the context of the web, the web is probably the biggest context in which view engines are used. And with the Cache being an extensibilty point, having a @cache directive in views outside the context of ASP.NET, should do no harm.<br></p>"
