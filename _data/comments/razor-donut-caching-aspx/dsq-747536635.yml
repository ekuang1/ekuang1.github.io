id: dsq-747536635
date: 2012-08-22T17:23:42.0000000-07:00
name: Aaron
avatar: https://disqus.com/api/users/avatars/Aaron.jpg
message: <p>With the proposed design, let's say I have a portion of the page from a @Html.Action("TodaysDiscountDesert") that returns a PartialViewResult to display today's special desert.  Every view I reference it in I surround it with @cache.  This seems to imply that the @cache { @Html.Action("TodaysDiscountDesert") } on the Home page and on the About page are two different caches(unless Razor does some analysis to determine that the two cache blocks in separate pages are identical contents).  I also would be duplicating the cache duration setting for that particular item across many pages.  If I want a VaryByParam on the action, how is the cache block aware of that param being passed to the child action, so that the child action knows to perform a substitution?<br>If possible, rather than having @cache, I'd rather the Razor engine look at the OutputCache attribute of any Action calls, and assume none with that attribute are cached with the parent page, and instead perform a substitution on each request of the cached(or not) parent page.  The process of evaluating that Html.Action call would go through the same check for a cache of that Action based on it's OutputCache configuration.  This ensures the caching configuration goes with the child action method, and rather than duplicating that configuration across all the pages that reference that child action.  It makes more sense to me this way also because when I consider caching for an action, I am thinking in terms of what that action is doing, and I want any coder who changes that action method to be aware that it is cached, so that they can re-evaluate if the changes the made to the code would warrant changing how caching is configured for that action.  I don't want to have to search through all the Views that call upon that child action and change the cache configuration in each case.  They would all be identical because the Child Action's behavior and how often data becomes stale is the same in all those contexts.<br>This is how a page which is not cached already works.  RenderAction will retrieve a cached result if that Action has an OutputCache attribute.  You just need to bring this behavior in alignment for a parent page that is cached, but making it not include any Action calls in its cache, and waiting to make a substution for the child actions whenever the parent page is being retrieved from cache.  In which case the retrieval of the child actions is done using the same logic that would be used if the parent page is not even cached.  This would avoid the gotchas/surprise when you find that your partials retrieved form child actions suddenly don't refresh when they are expected to because you configured caching for a parent page.</p>
