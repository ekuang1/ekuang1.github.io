id: dsq-747525828
date: 2008-07-24T14:29:52.0000000-07:00
name: Sonu
avatar: https://disqus.com/api/users/avatars/Sonu.jpg
message: <p>Sorry but I do not agree.  Unit tests should be *legally* allowed to test a unit of an application even if it crosses boundaries.  Up to some extent, it also depends on how the team is organized - although some might argue that it should not.  But practically speaking, if team is organized in such a way that one single developer is responsible for end-to-end development of a single unit of work - a small piece of functionality - he/she would like to test that as a single unit to make sure it works fine before passing moving them further for other types of testing.  Assume an application has 3 layers and unit tests are forbidden to cross boundaries strictly.  The developer will need to create 3 sets of unit test cases, two sets of integration test cases to test the two boundaries amongst the layers and another integration test to test these three layers of the same logical unit together.  The developer would also be required to create stubs and drivers and imaginary data for each set of tests.  I am not able to understand how all this arrangement would work faster! IMHO, any criteria for determining as to what a proper unit test is should consider a number of things including practicality.  While we may agree in theory with any definitions, it is practicality that prevails.  It doesn't matter if we try and define there are various *types* of proper unit tests to take care of varied contexts and practical scenarios.</p>
