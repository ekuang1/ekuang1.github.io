id: dsq-747526175
date: 2008-08-24T21:55:39.0000000-07:00
name: haacked
avatar: https://github.com/haacked.png?size=120
message: <p>@all Ignore the double assert. As Brad mentions, there is a library of the "Should" style extension method asserts in xUnit.NET. I just haven't played with them yet. This is a proposed syntax and we can change the names of any methods. Suggest a better name! :)<br>@Scott Bellware do you have an example of a ruby-based context/specification example that you would consider among the best examples out there?<br>Regarding my "biases of the Fixture per Class xUnit pattern", to be fair, I think all the C# examples exhibit the bias of assert per method bias. In other words, when you look at the various Ruby implementations, they use blocks rather than methods and classes to delineate specs. It is possible to do something like that with C#. I could have had all my tests in a single method.<br>Regarding "I don't think that it's such a positive thing to express these alternatives yet", I understand your opinion, but I completely disagree.<br>First of all, a great way to learn a new concept is to dive right in and try to improve it. Sometimes those attempts may be naive, but what better way to understand something than to try and understand both its strengths and weaknesses. I've put the requisite disclaimers in the post, I don't think you should try to quiet my exploration.<br>Try to look beyond your own biases. I know you've spent a lot of time with SpecUnit.NET and have a lot invested in this area. Are you suggesting there's no room for improvement? I doubt that fits the Kaizen way.<br>Are you suggesting that nothing in my examples (perhaps with a bit of cleanup, renames, etc...) that has any merit? <br>If so, I respect your experience in this area and am willing to harder look to see what the shortcomings are. But I would appreciate specifics. You mention my biases, but you don't say why they're necessarily wrong.</p>
