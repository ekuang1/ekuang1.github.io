id: dsq-747526178
date: 2008-08-24T22:10:24.0000000-07:00
name: davidalpert
avatar: https://disqus.com/api/users/avatars/davidalpert.jpg
message: <blockquote>"the stack is not empty".Assert(() =&gt; Assert.False(stack.IsEmpty));</blockquote><p><br>I actually like that syntax; it provides a human readable (and easier to type without all those underscores) explanation on the left followed by a coded execution on the right.  There's actually less going on there than it looks like and after you grok that it should be fairly simple to scan either the string descriptions or the execution codes...<br>At the same time, i'm not a fan of the Woulda, Coulda, Shoulda extensions.  I tried using them in some ASP.NET MVC unit tests and found them <em>less</em> readable; suddenly i couldn't scan for my Assertions because they were all "hidden" and scattered throughout the source masquarading as standard method calls.  I went back to Assert. syntax as the standard signatures helped highlight the expected and actual data.<br>Perhaps, however, the Woulda, Coulda, Shoulda syntax has a place when writing tests to document syntax as opposed to tests that verify functionality.<br>I realize that ideally the same tests may serve both goals, but we're all learning, right?</p>
