id: dsq-747526168
date: 2008-08-24T13:45:00.0000000-07:00
name: Colin Jack
avatar: https://disqus.com/api/users/avatars/Colin Jack.jpg
message: <p>"the stack is not empty".Assert(() =&gt; Assert.False(stack.IsEmpty));<br>I like the experimentation but this syntax doesn't seem attractive to me, far too much going on in that one line.<br>I'm also with Scott on the fact that to appreciate the context/specification style you need to try it for a while. After a (short) while you realize that its all about exploration/design and results in a much improved experience over the approach where you try to do a lot of things in each specification method. <br><br>"I feel like having to encapsulate each observation as a method adds a lot of syntactic overhead when I’m trying to read this class from top to bottom. Maybe that’s just something you get used to."<br>I actually feel the short focussed specification methods are one of the major advantages of BDD as suggested by Astels (<a href="http://www.daveastels.com/files/BDD_Intro.pdf" rel="nofollow noopener" title="http://www.daveastels.com/files/BDD_Intro.pdf">http://www.daveastels.com/files/BDD_Intro.pdf</a>). <br>Also if its the flow that bothers you you could reorganize, perhaps put the specifications first (saw this on a blog entry recently but haven't tried it yet). This would work with the context/specification approach because the class name tells you the context so you only need to see the setup/because method if you want to understand how you get to that situation.<br>I would also encourage anyone looking at BDD to also look at what Dan North has been doing as he was the pioneer of BDD and his style is quite different and (as I see it) more suited to acceptance testing.</p>
