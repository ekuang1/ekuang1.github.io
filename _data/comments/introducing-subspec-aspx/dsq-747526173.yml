id: dsq-747526173
date: 2008-08-24T19:41:41.0000000-07:00
name: Mel Grubb
avatar: https://disqus.com/api/users/avatars/Mel Grubb.jpg
message: <p>My problem lately with the traditional BDD-style syntax has been that if your "behaves_like" inheritance goes more than a single layer deep, it starts to become impossible to look at a context class and see what the actual context is.  So much stuff is hidden in the base classes that you can't tell what the world looks like anymore without going on a safari through the code.  I'm toying with the idea of using a BDD-like syntax, but without and "behaves-like" classes at all.  Anything needed to set up the context would go in a single base class as helper methods that get called by each descendent context class.  This way, you could look at the "before" method of a context and see everything that's happening.  In pseudocode, it might look something like this:<br>public class given_a_customer_with_orders<br>{<br>    before_each_spec()<br>    {<br>        Customer c = CreateCustomer();<br>        Order o = CreateOrder(c);<br>        OrderDetail od = CreateOrderDetail(o);<br>    }<br>    ...tests...<br>}<br>I don't have to keep track of what may or may not have happened in some base class now.  I can clearly see what my actual context IS in one place within the context itself.  I think it's a lot more readable than the traditional syntax.<br>MG2</p>
