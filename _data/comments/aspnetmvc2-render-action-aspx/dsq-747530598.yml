id: dsq-747530598
date: 2009-11-18T02:20:00.0000000-08:00
name: Scriov
avatar: https://disqus.com/api/users/avatars/Scriov.jpg
message: <p>Phil,<br>Something like this is just what we've been looking for, but having seen the implementation I'm not sure...<br>We've been looking for a way to display multiple sets of data on one page. Assume the page is a Products list, but in the UI somewhere there is also a Private Messages toolbar.<br>Currently, the only way to do this (to my knowledge) is for the single action to populate the ViewData for Products &amp; Private Messages which is no good.<br>We were hoping RenderAction would solve the issue:<br>ProductsController<br>    Index();<br>MessagesController<br>    Index();<br>    Summary(); // Lets say this is the one that we'd want to use,<br>               // it sets it's own View Data so that<br>               // Products/Index doesn't have to<br>Then, within a view somewhere one could have:<br>Html.RenderAction("Messages", "Summary");<br>But it doesn't sound like we'd be able to set a controller name?<br>Others above have suggested using a ViewModel and Action Filter to set data in said model. This (to me) doesn't sound right either. It should be actions that set data, not passive, out-of-the-way <br>places like Action Filters (not to mention in a modular application one couldn't easier have a base ViewModel anyway; each component could, in theory, plug into a different MVC Shell app and this shell have may not have Private Messages so it wouldn't make sense to have a view model that represents that. Same goes for inherited controllers that have the MessageSummary action built in; it's not valid in every use of the module.)<br>Again, I'm looking to focus on Actions having a single responsibility which is to populate their data, not data for all of the other components on the screen (it is the Products action afterall, not ProductsAndMessages).<br>Does this make sense? Does it sound too crazy? Is there already an easy solution to this in MVC?<br>Cheers,<br>Scriv</p>
