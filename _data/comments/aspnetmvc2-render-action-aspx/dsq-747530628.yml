id: dsq-747530628
date: 2009-12-30T03:04:24.0000000-08:00
name: Robert Koritnik
avatar: https://disqus.com/api/users/avatars/Robert Koritnik.jpg
message: "<p>Well, using forms in partial views and displaying them using <em>RenderPartial()</em> is a minor issue, because there's still only one controller action being executed.<br>Things tend to get more messy when you display partial views using <em>RenderAction()</em>. When you'd use <em>Html.BeginForm()</em> it wouldn't add action attribute to it, so all would post back to your main view. But even if you had provided some other controller and action, it wouldn't work, because your action can (and in some cases it has to) return a <em>PartialView</em>. This action would be executed as a result of an HTTP request and not as a result to <em>RenderPartial()</em> call.<br>Now think of returning something back? What? A view! But how would you know which one if your action is being called within various different pages?<br>I think that avoiding FORM element usage in partial views isn't a solution here. <strong>Let me explain why by a practical example:</strong><br>Your site has two major \"controls\" (actions that are called by <em>RenderAction()</em> and return <em>PartialView</em>), that are part of every view: <strong>Logon</strong> with two inputs and a button and a <strong>Quick search</strong> with a text box and a button.<br>1. you can't have both controls in the same form, because there might be another form as the main page content (let's say someone is adding a comment to a post that's being displayed in the view)<br>2. Having them all contained within the same form means submitting a comment would result in sending comment, login and search values as well. What if I had entered something in the search box and then entered comment fields and submitted them? What should I do then? Display search results or add a comment?<br>3. Having them in separate form elements solves the problem. Clicking on Search button takes me to search results. This one is easy, because search results probably are going to be displayed in a completely separate view.<br>4. But what happens when a user logs in? You have your blog post page with comment form. It displays a particular post related by route values. Then your user decides to log in. They enter their credentials and click \"Login\" submit button. Form action would be set to go to ../Account/Login. Ok. So the call processes form values and authenticates user. But what's next? This action should return a partial view with user information that would be displayed in place of a login form. But it can't because there was a full page postback. It has to display the same page that was displayed previously.<br>I hope that by this very common everyday example I've explained the problem of <em>RenderAction()</em> helper. It's the right tool for the job, but it doesn't quite provide the necessary functionality.<br>I have an idea how this should work, but I haven't tested it thoroughly yet...<br>The thing is that all form should post back to the main view's URL. Every form element should also have a hidden input with data about the actual controller+action[+additional route values] of the form. When the page is being processed, only the control (rendered by <em>RenderAction()</em>) that's related to this controller+action provided in the hidden field should process as a POST request. All others should only be renedered as GET.<br>1. Main view will get displayed as a GET call to some action.<br>2. Some form that is posting data will be processed with POST.<br>3. Other forms will be processes as GET.<br>This would be possible, because <em>RenderAction()</em> does initiate a new <em>MvcHandler</em> with generated http context (including request).<br>Drawbacks:<br>1. Messing around with hidden fields reminds me a bit of web forms...<br>2. All forms (as FORM elements) should be part of partial views displayed in the main view by <em>RenderAction()</em>.<br>I guess everything else should work as expected.</p>"
