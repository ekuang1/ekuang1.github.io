id: dsq-747524673
date: 2008-03-24T18:12:45.0000000-07:00
name: Daniel Cazzulino
avatar: https://disqus.com/api/users/avatars/danielkzu.jpg
message: "<p>Indeed Oran, we're all passionate about the stuff we're proud of :)<br>MockFactory was added because people wanted to do a single Verify/VerifyAll call and have all used mocks verified. But still, note the Verify version is there, to allow you to verify only stuff you mark as Verifiable(). I think this is quite unique. We even have a proposal to add an overload receiving a \"verification group\" to it, like Verifiable(\"MultiUser\"), so people is finding it quite useful to have more granular control about which expectations they want to verify or not. <br>To me, that's a case where they don't care/even know that they are going from a Stub to a Mock when they do that. Yes, the API implements those ideas, but in a way which is completely hidden to the user, who just sees a simpler concept (do you want to verify this or not?) and an API that guides them easily.<br>MockBehavior enum explicitly doesn't use Stub|Fake|TrueMock for the very same reason I still hold: users don't care what it's theoretically called by pundits/experts/academia/etc.. The resulting behavior is more or less strictness on the mock. That's what users care about. That's the ultimate meaning of what I say WRT to Stub/Fake/Mock naming and concepts. <br>I'd even go as far as renaming Loose to NeverThrow, and Relaxed as ThrowIfNoReturnValue, which are easier to understand. It would never occur to me to rename those to \"Stub\" or the like. That's Moq spirit. And I don't think there's a classification for our Relaxed bahavior, btw... <br>We did have a proposal to add using(), but we're evaluating the best syntax, as we have different kinds of verification. Also, the using() syntax is less explicit and precludes reuse of the factory through test fixture setup/test/teardown, which is an important drawback IMO. But we might just give users more choice if they so wish to. <br>But not that our factory is NOT a repository: it's just a list of mocks where we call Verify/VerifyAll. Expectations are still owned by each mock. So conceptually they are still quite different.</p>"
