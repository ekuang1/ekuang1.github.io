id: dsq-747524653
date: 2008-03-23T13:11:59.0000000-07:00
name: Oran
avatar: https://disqus.com/api/users/avatars/Oran.jpg
message: <p>MoQ lumps its "repository" and the mock together into a single unit, which is partly why the mock.Object drill-down is necessary.  You essentially get one repository per mock instead of a shared repository.<br>The lack of a record/playback model is philosophical sleight-of-hand by Daniel.  It's still there, it's just implicit not explicit.  mock.Expect() is record, using mock.Object is playback.<br>Setting expectations on the mock itself is quite doable with an extension method.  Anyone can graft this on to Rhino Mocks with just a few lines of code, and I expect to see it soon in the Rhino Mocks library itself.<br>MoQ is a rather unique mocking tool, both technologically and especially philosophically.  I expect to see the use of lambdas catching on in all of the .NET mocking libraries.  But I don't believe there is another mocking tool with the same philosophy in .NET nor in any other programming language.  Maybe it's a true philosophical breakthrough, but since Daniel's arguments seem to have come from a NIH perspective rather than reflecting an understanding of the existing body of knowledge, I doubt it.</p>
