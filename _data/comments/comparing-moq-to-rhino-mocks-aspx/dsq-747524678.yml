id: dsq-747524678
date: 2008-05-10T08:20:56.0000000-07:00
name: Martin Platt
avatar: https://disqus.com/api/users/avatars/Martin Platt.jpg
message: <p>Okay, one thing that I haven't been able to do, and wondered if it is supported, or if it's just something that you guys might be able to help with:<br>If in my code, I have a foreach loop, previously I've used something to expect that GetEnumerator() would be called, followed by Expectations on the enumerator to get the Current property of the enumerator to return data to the code.<br>When I tried this with Moq, it didn't work, it didn't seem to ever get called.  The external property is Current (using NMock2 for example) but if I miss the expectation, Moq tells me that it is get_Current that should be expected, which tells me that it is indeed the get for the current property.  However, all I have avilable to me is currrent.  Am I mising something?<br>So if I wanted to mock the return of data I might want the foreach loop to return 1, 2, 3 for example:<br>mockedForEachList.Expect(x =&gt; x.GetEnumerator()).Returns(mockedEnumerator);<br>mockedEnumerator.Expect(x =&gt; x.MoveNext()).Returns(true);<br>mockedEnumerator.Expect(x =&gt; x.Current).Returns(1);<br>mockedEnumerator.Expect(x =&gt; x.MoveNext()).Returns(true);<br>mockedEnumerator.Expect(x =&gt; x.Current).Returns(2);<br>mockedEnumerator.Expect(x =&gt; x.MoveNext()).Returns(true);<br>mockedEnumerator.Expect(x =&gt; x.Current).Returns(3);<br>mockedEnumerator.Expect(x =&gt; x.MoveNext()).Returns(false);<br>mockedEnumerator.Expect(x =&gt; x.Dispose());<br>In this circumstance is seems that my Expects make the moq'ed object to return like a stub, and I get an endless loop - how do I do this, please?<br>Cheers,<br>Martin Platt.</p>
