id: dsq-747524671
date: 2008-03-24T08:29:29.0000000-07:00
name: Oran
avatar: https://disqus.com/api/users/avatars/Oran.jpg
message: <p>Daniel, several months ago I carefully read all of your blog posts and comments regarding Moq (including the very cool strongly-typed reflection stuff), so I do understand what motivated you to write your own.  I'm sure it meets your needs and fits your style.  It is also rather opinionated software (along the lines of DHH and Ruby on Rails) which is both a good thing and a bad thing.  Rhino Mocks and TypeMock are also rather opinionated pieces of software, so there is going to be a fair bit of passion for and against each of these tools.  It will be interesting to see how things shake out.<br>I understand that Moq doesn't explicitly switch between record and playback states.  I'm just saying it's still implicitly there.  You still set expectations and then use the mock.  In Phil's Moq example, he put a blank line between the setup/record phase and the playback phase, and I expect many people will do the same to clearly distinguish which "mode" they're in.  I personally like Rhino Mocks' using()-style syntax, but that's just me.<br>using (mocks.Record())<br>{<br>    Expect.Call(...);<br>}<br>using (mocks.Playback())<br>{<br>    ....<br>}<br>I think it's interesting that MockFactory was added to Moq last month, with Verify/VerifyAll methods.  This is the equivalent of Rhino Mocks' MockRepository, enabling Phil's Moq example to be rewritten in the same style as the Rhino Mocks example.  I'll bet you could put a using()-friendly wrapper on it to make it even easier to work with... ;-)<br>I do like the continuum idea where you start loose and opt into just the strictness you need, but that's still a concept the user has to understand and care about.  Moq's MockBehavior [1] enum (Strict, Normal, Relaxed, Loose, Default) is just a different way of accomplishing this, and I would argue it's just as confusing as Rhino's 4 different types of mocks that you were poking fun at a week ago.  Rhino's mocks.CreateMock&lt;T&gt;() is equivalent to Moq's new Mock&lt;T&gt;(MockBehavior.Strict).  I do like the discoverability and consistency that MockBehavior adds, but it implements the exact mock continuum concepts that you say developers shouldn't care about or understand.  It just bugs me that you take the rich feature set of other mock frameworks and spin them as unnecessary complexity, and then you go and implement the exact same features in Moq after the fact.<br>[1] <a href="http://www.clariusconsulting.net/labs/moq/html/90760C57.htm" rel="nofollow noopener" title="http://www.clariusconsulting.net/labs/moq/html/90760C57.htm">http://www.clariusconsultin...</a></p>
