id: dsq-747524669
date: 2008-03-24T05:32:39.0000000-07:00
name: Daniel Cazzulino
avatar: https://disqus.com/api/users/avatars/danielkzu.jpg
message: "<p>For many more reasons on why we created Moq (let's pronounce it mock-you to disambiguate ;)) see <a href=\"http://snurl.com/moq-why\" rel=\"nofollow noopener\" title=\"http://snurl.com/moq-why\">http://snurl.com/moq-why</a><br>The record/replay *implementation detail* of most other mocking frameworks is so much embedded into some people's minds that they try to see it even when it does not exist in reality. @tgmdbm really got it: there's NO record/replay phases in Moq. NONE. Arguing that using Mock.Object is playback is stretching the concept, when in reality there's no transition of state in the mock between one and another (non-existent) phases.<br>@Oran, I don't expect you to have read all my blog posts on the reasoning for <a href=\"http://snurl.com/moq-blog\" rel=\"nofollow noopener\" title=\"http://snurl.com/moq-blog\">Moq's existence</a>, but they do explain in quite some length why we came out with it. It's not NIH, it's the result of taking an existing problem domain and tackling it with a new perspective, purposedfuly ignoring existing preconceptions, to come up with something useful that doesn't assume prior knowledge from potential users (newcomers find it immediately familiar). And I say WE because it's not just ME that came up with it. The need was shared among <a href=\"http://clariusconsulting.net\" rel=\"nofollow noopener\" title=\"http://clariusconsulting.net\">two</a> <a href=\"http://manas.com.ar\" rel=\"nofollow noopener\" title=\"http://manas.com.ar\">companies</a> working on <a href=\"http://instedd.org\" rel=\"nofollow noopener\" title=\"http://instedd.org\">very real-world projects</a>. It's the result and the evolution of what we use every day.<br>@Krzysztof Kozmic: you can always call mock.VerifyAll() in Moq.<br>@Oran note how your added example is now using MockRepository.GenerateStub&lt;ISomethingUseful&gt;(), which means now someone using the framework has to know the difference between that and a \"true mock\". I've argued in the past that the distinction is irrelevant in practice.<br>Through our discussion on Ayende's blog, I finally clarified my own ideas around the topic: I agree with Fowler (and THAT was the context of my reference to his work) with the two styles of testing (and @Oren you also said you didn't agree with him), but I believe <a href=\"http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/27/48594.aspx\" rel=\"nofollow noopener\" title=\"http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/27/48594.aspx\">most developers don't/shouldn't care about the differences between mocks, stubs and fakes</a>. They should use whatever they need, whichever the name. Hence, in Moq, <a href=\"http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/21/47152.aspx\" rel=\"nofollow noopener\" title=\"http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/21/47152.aspx\">you have a single concept, which can move on that continuum between those</a>. <br>@Haacked Moq is equally effective for interaction based testing, though <a href=\"http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/21/StateTestingvsInteractionTesting.aspx\" rel=\"nofollow noopener\" title=\"http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/21/StateTestingvsInteractionTesting.aspx\">I also like state based better</a> :)<br>@Jeremy @Oran - The point of being able to add expectations to a mock is so that you can reuse default expectations that are set through a test fixture setup. That's very useful when you have quite some wiring to do between related mocks (something like MVC hook-up) and you want to put all that in a single place. You never need to worry about the \"state\" (record/replay) of the mock as there's no such state in Moq.</p>"
