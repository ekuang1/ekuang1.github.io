id: dsq-747532188
date: 2010-12-04T19:38:06.0000000-08:00
name: Rogerio Senna
avatar: https://disqus.com/api/users/avatars/rs3nn4.jpg
message: "<p>I was getting the same server-side issues described by peelmicro. I'm from Brazil, and here we treat numbers like the spanish speaking coutries - '.' is the thousand separator, and ',' is the decimal. And it seems that the current implementation of the CustomModelBinder (I am using ASP.NET MVC Release Candidate) is NOT able to correctly parse a numeric text containing thousand separators that are not the EN default ','.<br>The only way I've found was creating a custom model binder - something like that:<br><code><br>public class ModelBinder : DefaultModelBinder<br>{<br>private static readonly List&lt;Type&gt; toIntercept = new List&lt;Type&gt; { typeof(DateTime), typeof(int), typeof(long), typeof(float), typeof(double), typeof(decimal) };<br>public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)<br>{<br>Type valueType;<br>if (ShouldIntercept(bindingContext, out valueType))<br>{<br>var modelName = bindingContext.ModelName;<br>var attemptedValue = bindingContext.ValueProvider.GetValue(modelName).AttemptedValue;<br>try<br>{<br>return ParseValue(attemptedValue, valueType);<br>}<br>catch (SystemException e)<br>{<br>if (!(e is InvalidCastException || e is FormatException || e is OverflowException))<br>{<br>throw;<br>}<br>}<br>}<br>return base.BindModel(controllerContext, bindingContext);<br>}<br>private static bool ShouldIntercept(ModelBindingContext context, out Type type)<br>{<br>type = context.ModelType;<br>if (type.IsGenericType &amp;&amp; type.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;))<br>{<br>type = Nullable.GetUnderlyingType(type);<br>}<br>return toIntercept.IndexOf(type) &gt;= 0;<br>}<br>private static object ParseValue(string attemptedValue, Type type)<br>{<br>return attemptedValue == null<br>? null<br>: Convert.ChangeType(attemptedValue, type, Thread.CurrentThread.CurrentCulture);<br>}<br>}<br></code><br>I guess this will also work for any other culture.</p>"
