id: dsq-935502979
replyToId: dsq-935468472
date: 2013-06-19T09:10:45.0000000-07:00
name: Isaac Schlueter
avatar: https://disqus.com/api/users/avatars/IsaacSchlueter.jpg
message: <p>Har Har.</p><p>In SemVer 1.0, as I read the spec, "1.0.0-a.5" &gt; "1.0.0-a.10".  Now it's the reverse.  That's a breaking semantic change.</p><p>In SemVer 1.0, "1.0.0+a" &lt; "1.0.0+b".  Now they're equivalent. Another breaking change.</p><p>In SemVer 1.0, the version "01.02.03" was valid.  In SemVer 2.0, it is not.  Another breaking change.</p><p>There's probably a few more I'm not noticing, but having rewriten node-semver to move it from v1.0 of the spec to v2.0, I can tell you, it's quite a lot of breaking stuff.  The clarifications are just a bonus :)</p><p>Bumping the major version is absolutely the right call here.</p><p>&gt; Also, fundamentally, SemVer versioning applies to libraries and packages. It doesn't have to apply to how you market products. :)</p><p>In the open source world, the line between "libraries and packages" and "marketing products" is rather vague.  All version numbers are marketing, and the semantics come from humans, not from a specification.</p><p>The SemVer specification is like a dictionary. It defines a vocabulary, and describes how people tend to use the terms in it.  If you want to be understood by others, it pays to follow the guidelines.  But let's not indulge in prescriptivism here!  It's not the role of a dictionary to define what words mean, but rather to report on the definitions that already exist and provide guidance.  Terms in human brains can have subtleties of meaning that a dictionary cannot ever fully capture, try as it might.</p><p>It's the language community that defines the semantics of a language's terms, and version numbers are no different.</p>
