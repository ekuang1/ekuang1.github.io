id: dsq-747527017
date: 2008-11-13T00:56:18.0000000-08:00
name: Mark Hildreth
avatar: https://disqus.com/api/users/avatars/Mark Hildreth.jpg
message: <p>Neal- If nobody else will, I will stick up for web forms. MVC has specific strengths that are not applicable in a decent number of situations. Sure they're great for entnerprise applications or more websites that require search engine compatibility/optimization, but the html output is largely generated by hand or by hand-written code. While this is fine for senior skillsets, with web forms you get the nice drag &amp; drop designer behavior that is great for low and mid-level skill sets. Look at the conrols from ComponentArt or Telerik - you can very easily add a project reference and then start dragging seriously power controls onto your form, wire up a few button clicks, and you ahve a great solution. The ideal pitch for webforms is not websites, but rather company intranets and utilities used to execute business processes. Implementing a simple solution with little or no code is very valuable in this case.<br>I think webforms get a bad rap becuase they are intially powerful with a small learning curve, but page life-cycle and viewstate issues make control development (or reusable webform code in general) very difficult. The drag &amp; drop designer is easy for those coming from a winforms world, but no so much for those coming from the ASP world. Building more advanced scenarios or reusable code has a really steep learning curve and that's not helping. I had to read at least 3 books on control development before I felt like I really "got it". I hope the team can invest in bring more of the toolkit controls into the core framework and continues to build new controls that ease this burden.<br>Phil- Thanks for the information. I'd be very interested in hearing more about the Web Forms and MVC crossover areas. Keep up the good work!<br>-Mark</p>
