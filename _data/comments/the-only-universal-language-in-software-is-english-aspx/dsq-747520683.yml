id: dsq-747520683
date: 2007-05-28T21:28:34.0000000-07:00
name: Cam Soper
avatar: https://disqus.com/api/users/avatars/Cam Soper.jpg
message: <p>I'm the only commenter on the previous post who used the word "panders," so I'm wondering if I'm the unnamed commenter you're referring to.  Let's look at my original quote:<br></p><blockquote>I think what J.Irvine was implying is that DateTime.Now.Subtract(TimeSpan.FromMinutes(20)); follows a common convention across languages, a hierarchical OOP syntax that makes sense regardless of your native tongue, while 20.minutes.ago seems to pander to the English speaker, the English syntax; e.g., the adjective "ago" applying to "minutes." I'm not saying I agree, but I think that's what he was saying. </blockquote><p><br>Okay, so I was trying to clarify what I thought J.Irvine was saying.  That interpretation being that the syntax of Ruby appears (to J.Irvine) to be the syntax of English.  Whereas the syntax 20.minutes.ago is purely English, DateTime.Now.Subtract(TimeSpan.FromMinutes(20)) is the OOP syntax we know and love from Java and C#.  Unfortunately, he never came back to tell us if my interpretation was correct.  <br><strong>The preceding was my <i>interpretation</i> of what that other guy was saying.</strong>  I do not fully agree.    I'm sure there's something in there that I, the Ruby neophyte, am not grasping at this point, and if I took some time to play with it, I'd probably be able to explain why J.Irvine is incorrect.<br>Now, in my own humble opinion, I'm not entirely sold on Ruby.  I don't feel it solves any problem for me that C# doesn't already.  Using LaptopHeaven's example, DateTime.Now.AddMinutes(-20) is just as (if not more) expressive to me as 20.minutes.ago.  Scott Hanselman points to the beauty of Ruby as a language, but I just don't see it.  Beauty is in the eye of the beholder, and I personally appreciate the beauty of C# and PowerShell.  Doesn't mean I won't sharpen the saw (as Scott puts it), but I don't know that I'll be developing live applications in Ruby any time soon.</p>
