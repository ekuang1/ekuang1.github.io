id: dsq-747530309
date: 2009-10-15T04:02:00.0000000-07:00
name: tvanfosson
avatar: https://disqus.com/api/users/avatars/tvanfosson.jpg
message: "<p>I think part of the problem is that Ted may be conflating Agile with particular Agile methodologies.  It may be entirely correct to say that XP, for instance, insists that I do TDD, pair-programming, etc. and thus it is too prescriptive for my small, 1-2 developer problem.  But that's a complaint about XP, not Agile.<br>The best description of Agile, in the large, that I ever heard was from Brian Marick at Agile 2005: Just Enough, Just in Time, and Just Because -- though, strictly speaking only the first two describe Agile itself while the latter describes the reality of using Agile in a non-Agile world.  Just Enough applies to process, tools, and features.  We want just barely enough process appropriate to the job at hand and no more.  We want to use just enough tools and techniques.  We want to develop just enough features.  Is XP too much? -- don't do it, do something simpler.<br>The thing is, though, that there are techniques or tools that have proven to be so valuable that there is almost no situation in which you could responsibly omit them from your tool belt.  You would have too little instead of just barely enough.  Things like source code control, testing, some sort of process introspection (Am I still doing just enough? Should I add more? Should I remove?), ...  It's hard for a non-practioner or amateur to see the value in the core pratices, but they have proven themselves over time.<br>It's a bit like teaching your kid how to drive.  You say, \"Make sure to look behind you before you start to back out of the drive.\"  Now, 95% of the time it probably doesn't make a difference whether you do or you don't -- at least on my quiet street.  The problem is that you must always do it because the consequences of the 5% could be catastrophic.  This is a tool you can't live without in your driving \"tool belt\" even if you have never run over the neighbor's dog (or child) because you forgot to look.<br>Note, though, that it isn't Agile per se that prescribes these practices.  These core practices are ones that you would want to follow regardless of your process -- except maybe introspection if you're following a highly regimented process that doesn't allow for process change.  Agile merely gives you permission to not to include any practice that doesn't add value (for example, no daily stand up for solo developers) or encourages you to add practices when they do (using small, frequent releases to get immediate customer feedback).</p>"
