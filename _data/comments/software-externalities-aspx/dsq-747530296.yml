id: dsq-747530296
date: 2009-10-13T10:58:00.0000000-07:00
name: John
avatar: https://disqus.com/api/users/avatars/John.jpg
message: <p>I have to be honest, I read Ted's blog, then yours, then had to flip back to Ted's, because it seemed like you were responding to a different blog than the one that Ted wrote.<br>I took Ted's point to mean that the problems of complexity are larger than the sphere that Agile solves. Agile solves some project management problems that waterfall had, but Agile is not the be all, end all of all good programming practices. In fact, one of the interesting things that I read by Grady Booch was that one downside of the Agile community is the lack of historical perspective -- many Agile programmers seem to believe that there weren't any good programming practices before Agile, which was most decidedly not the case.<br>I actually think that the answer to Ted's complexity problem has nothing to do with Agile. Sharepoint and other CMS tools (Joomla, Sitefinity, etc.) are useful tools for creating quick, decent sites. Best of all (for the company), they can be maintained by people making 1/2 what programmers make.<br>On the other hand, things will get even more complex for the professionsal software engineer, but so what. To be an engineer in most states, you have to become certified. Actuaries are required to pass a number of tests to continue to advance in their profession and their companies typically set aside time for recent college grads to study for the exams. Why should the profession of building software be any different than other mature professions?</p>
