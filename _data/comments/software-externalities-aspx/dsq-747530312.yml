id: dsq-747530312
date: 2009-11-08T22:14:00.0000000-08:00
name: Calvin
avatar: https://disqus.com/api/users/avatars/Calvin.jpg
message: <p>&gt;&gt; Not only that, but business processes get more complex over time as entropy sets in. The applications I mentioned dealt with this entropy and reached a point where the current solution could not scale to meet that new level of complexity (a different sort of scaling up), so they started to drown in it, the original authors of the applications long gone off to create new apps with new externalities.<br>You make it sound like it's the fault of the original programmers. IMO, they gave the customer what was required - no more, no less. After all, if the customer asked for an application to be used by 15 people at irregular intervals of time spread out over the week, then that is what I would give them. If I offered more (with a correspondingly higher price tag), they would only reject my proposal and take their business elsewhere. It certainly doesn't make business sense to me to absorb the cost of my customer's externalities.<br>As for those who say code for the future and that the bulk of an IT project's lifespan is spent in the maintenance phase. I'll agree up to this point, but from my experience, many applications, or at least many features of an application are never used after deployment. That means it is futile to make an overly complicated design up front. Not to say you should write spaghetti code, but best to keep it simple. You can always refactor the 10% of the application that is actually used later on, if necessary.</p>
