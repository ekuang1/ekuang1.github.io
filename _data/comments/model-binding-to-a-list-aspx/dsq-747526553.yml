id: dsq-747526553
date: 2008-10-26T14:39:42.0000000-07:00
name: Vladan Strigo
avatar: https://disqus.com/api/users/avatars/Vladan Strigo.jpg
message: '<p>@Ricky,<br>Your doing exactly the same thing I am. The only difference is that your custom attribute *is* your binder (implements binder interface and inherits from custom binder attribute) as well (which IMO from SRP perspective is not a good thing).<br>Here is my implementation (you will notice the issue I am having in the Binder itself):<br><a href="http://akuaproject.googlecode.com/svn/trunk/framework/trunk/src/Web.MVC/Controller/Attributes/FetchAndBindAttribute.cs" rel="nofollow noopener" title="http://akuaproject.googlecode.com/svn/trunk/framework/trunk/src/Web.MVC/Controller/Attributes/FetchAndBindAttribute.cs">akuaproject.googlecode.com/.../...BindAttribute.cs</a><br><a href="http://akuaproject.googlecode.com/svn/trunk/framework/trunk/src/Web.MVC/Controller/Binding/RouteQueryFormToModelFetcherAndBinder.cs" rel="nofollow noopener" title="http://akuaproject.googlecode.com/svn/trunk/framework/trunk/src/Web.MVC/Controller/Binding/RouteQueryFormToModelFetcherAndBinder.cs">akuaproject.googlecode.com/.../...cherAndBinder.cs</a><br>Notice:<br>var hackedBindingContext = _Recreate_Binding_Context_Because_of_SEALED_BindAttribute_in_Beta(bindingContext);<br>in BindModel and the function itself from above:<br>        private ModelBindingContext _Recreate_Binding_Context_Because_of_SEALED_BindAttribute_in_Beta(ModelBindingContext currentBindingContext)<br>        {<br>            return new ModelBindingContext(currentBindingContext,<br>                                           currentBindingContext.ValueProvider,<br>                                           currentBindingContext.ModelType,<br>                                           _GetPrefixOrModelName(currentBindingContext.ModelName),<br>                                           () =&gt; currentBindingContext.Model,<br>                                           currentBindingContext.ModelState,<br>                                           _IsPropertyAllowed);<br>        }<br>        private string _GetPrefixOrModelName(string currentModelName)<br>        {<br>            return (string.IsNullOrEmpty(_prefix)) ? currentModelName : _prefix;<br>        }<br>        private bool _IsPropertyAllowed(string propertyName)<br>        {<br>            var includeProperties = StringHelper.SplitString(_includeProperties);<br>            var excludeProperties = StringHelper.SplitString(_excludeProperties);<br>            // We allow a property to be bound if its both in the include list AND not in the exclude list.<br>            // An empty include list implies all properties are allowed.<br>            // An empty exclude list implies no properties are disallowed.<br>            bool includeProperty = (includeProperties == null) || (includeProperties.Length == 0) || includeProperties.Contains(propertyName, StringComparer.OrdinalIgnoreCase);<br>            bool excludeProperty = (excludeProperties != null) &amp;&amp; excludeProperties.Contains(propertyName, StringComparer.OrdinalIgnoreCase);<br>            return includeProperty &amp;&amp; !excludeProperty;<br>        }<br><br>This would be not needed if the BindAttr was not sealed.<br><br>Any thoughts?<br><br>Vladan</p>'
