id: dsq-2414887775
replyToId: dsq-2413835351
date: 2015-12-17T13:43:57.0000000-08:00
name: Chris Nielsen
avatar: https://disqus.com/api/users/avatars/disqus_4eACU6Y9FI.jpg
message: <p>The only impact that using directives have is that the compiler knows which code to link, when it finds usages of code in that namespace, which then at runtime causes the appropriate assemblies to be loaded. I can guarantee you that your program is already loading the core assemblies where the System namespace lives (mscorlib), even if you clean all the using System directives out of every file in your project/solution. There is zero overhead to having unused using directives, because the compiler optimizes them out. But unless you're lucky enough to have ReSharper or a similar tool, working in a file that someone was fastidious enough to remove all unused usings, you're going to have a little hiccup when you go to use something that's pretty standard in the language (e.g. Console, LINQ, etc.) when you have to remember to go back and put that using directive back.</p><p>I personally take the default class template's list of 5 using directives, and make sure that every file in my solutions have those five, even if they're not used. ReSharper clearly grays them out for me, and a lot of times automatically removes them, but I always put them back.</p><p>Back in my more junior days I had too many times when I went to type a LINQ extension method and it wasn't in Intellisense and showed a red squiggly compiler error. And I had to sit there for a few minutes figuring out what the heck was wrong, simply because we removed the using directive to keep our files "clean".</p><p>Nowadays, it's second nature, and with ReSharper it's even less so. But I want to help my junior devs have that little bit less of friction as they're coding.</p>
