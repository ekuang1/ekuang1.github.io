id: dsq-2755158866
replyToId: dsq-2754566245
date: 2016-06-28T10:00:06.0000000-07:00
name: Ken Egozi
avatar: https://disqus.com/api/users/avatars/kenegozi.jpg
message: <p>The distinction between reference and value types is quite clear. Reference (represented in c# as 'class') types' values live on the Heap, and a pointer to them is passed to method calls, while Value (represented in c# as 'struct' and primitives) types' values live on the Stack, and a *copy* of them is passed to methods.</p><p>DateTime happens to be a struct (see <a href="http://referencesource.microsoft.com/#mscorlib/system/datetime.cs,df6b1eba7461813b)" rel="nofollow noopener" title="http://referencesource.microsoft.com/#mscorlib/system/datetime.cs,df6b1eba7461813b)">http://referencesource.micr...</a> hence a Value type.  Entirely *not* like String which is a class (<a href="http://referencesource.microsoft.com/#mscorlib/system/string.cs,8281103e6f23cb5c)" rel="nofollow noopener" title="http://referencesource.microsoft.com/#mscorlib/system/string.cs,8281103e6f23cb5c)">http://referencesource.micr...</a>  hence a Reference type.</p><p>On a related note, there is a 1:1 correlation between *real* nullability and reference/value "thing". For that matter the .NET Nullable&lt;&gt; *struct* is a trick, a variable of which is never null, and when being compared to a null it would instead look into its .HasValue field.</p>
