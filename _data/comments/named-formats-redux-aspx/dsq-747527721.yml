id: dsq-747527721
date: 2009-01-15T15:03:45.0000000-08:00
name: Atif Aziz
avatar: https://disqus.com/api/users/avatars/Atif Aziz.jpg
message: <p>Implementing a table-based state machine by hand, as Henri has done it, is a bit unnecessary given <code><a href="http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx" rel="nofollow noopener" title="http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx">yield</a></code> in C# (as you've done it in your version). Code using <code>yield</code> is almost always (given certain complexity) easier to write, read, understand, maintain and extend. It is also more concurrent in nature because its easier to avoid side effects. The heavy-lifting of creating an optimal and table-based state machine out of such <em>yielding code</em> can be left as an exercise for the compiler folks. :) Fortunately, that's what already happens today.<br>I'm not sure if the number of states and complexity of the problem warrants modeling it in terms of an explicit state machine. A simpler implementation with the usual control suspects of the language will do. I think you'll find the following version shorter, simpler and easier to read, follow and debug:<br><a href="http://gist.github.com/47888" rel="nofollow noopener" title="http://gist.github.com/47888">http://gist.github.com/47888</a><br></p>
