id: dsq-747519777
date: 2007-04-24T17:32:41.0000000-07:00
name: Joe Brinkman
avatar: https://disqus.com/api/users/avatars/Joe Brinkman.jpg
message: "<p>I may have some insight into that .Net Open Source Application that shall not be named.  You see one thing you forgot to mention regarding a membership provider, is that sometimes membership is meant to span more than one application.  If you have 5 web applications with 5 custom membership implementations, then a user would need 5 separate sets of credentials - 1 for each app.  However, if these 5 applications shared a common implementation then it would be possible for a user to login to all 5 apps using a single set of credentials.<br>The application in question was/is part of a shared hosting program sponsored by a very large software company.  This company laid out a goal for all web apps in the program to be able to share membership thereby allowing a user's site's to have a single login even though the site might actually consist of more than one application.  Alas, for a number of reasons we won't discuss here, the actual sharing of the membership tables never occured, but by the time it became apparent that this would not happen, it was too late in the release cycle to really go and change things.<br>Subsequent releases of \"The app that shall not be named\" have addressed some of the limitations encountered by the first implementation and we... err I mean they... expect that future releases will probably jettison the core membership tables altogether the same way the core profile and role providers were jettisoned in favor of custom implementations.<br>One final note:  In the future I think you will see problems like this handled by implementations that use a federated approach to membership.  This would allow each application to maintain it's own custom membership data, while allowing users to maintain their \"official\" set of credentials in a common service.  You can see this with Passport, Cardspace, OpenID and Liberty Alliance.  I think ultimately, that relying on a built in db for sharing will go away and people will instead share this type of information through a trusted intermediary who provides the necessary abstraction between partner applications.<br>PS:  Sorry for hijacking your blog like this since it does seem in bad form for the comment to be almost as long as the post itself, but I have never been a big fan of answering a blog with a blog when the comment area seems so much more appropriate.</p>"
