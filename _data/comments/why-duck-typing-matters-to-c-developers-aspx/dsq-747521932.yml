id: dsq-747521932
date: 2007-08-19T12:58:58.0000000-07:00
name: Rob Conery
avatar: https://disqus.com/api/users/avatars/Rob Conery.jpg
message: <p>I dunno... duck-type loosey-goosey barnyard programming is much more of a stylistic approach than C# will let you have. In other words, we're taught to program against types - so when we create a method, we make sure the parameters specify the types we need to work.<br>Duck typing doesn't care (as you mention above) - it only needs to be capable of certain behavior. To me this is a core difference of a functional language.<br>Ruby classes are defined by what they "do", not what they are. You can write code against this principal for testing. A classic example is string concatenation:<br>def append_words(word1, word2)<br>  if word1.respond_to (:&lt;&lt;) &amp;&amp; word2.respond_to (:&lt;&lt;)<br>    word1 &lt;&lt; word2<br>  else<br>    <a href="http://TypeError.new" rel="nofollow noopener" title="TypeError.new">TypeError.new</a> ("can't append these values")<br>  end<br>end<br>This type of coding is more of a mindset than anything - and my point with this ramble is that wedging duck typing into C# is sort of going against it's "thang".</p>
