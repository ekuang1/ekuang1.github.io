id: dsq-747521943
date: 2007-08-19T21:21:45.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>@Jacob TypeMock sounds great for mocking the HttpContext if that were my only goal here, but that's not my goal here and I only mentioned that as an afterthought.<br>This is an issue of code design. I want to decouple my code from HttpContext and promote loose coupling. Controlling my dependency graphs makes it easier to write maintainable code.<br>This came up one day when I wanted to write a command line tool for Subtext and noticed that my dependency graph required me to import just about ever assembly ever created. I would've liked to simply pass in a different context. Duck Typing provides a simpler way to do this.<br>@The Other Steve - I could write an adapter, but why write more code when I can get it done in less with duck typing? Duck typing won't fit all situations, but when it does, it's a nice toolkit to have in your toolbelt. That's all I'm saying. I'm not advocating everyone to go out and rewrite every adapter to use duck typing.<br>@Damien but the same can be said of two classes that implement an interface. That doesn't magically provide semantics for how the code should act. In fact, sometimes classes don't implement the full interface and throw NotImplemented exceptions when calling a method (some Stream implementations are an example).<br>The key here is that the burden is ultimately on the developer to be aware of what she is doing and to write tests to validate assumptions on how the code is actually acting, rather than blindly trusting that a method called quack does quack in the way she wants. Likewise she can't simply trust that the method quack of IDuck quacks in the way she wants either.</p>
