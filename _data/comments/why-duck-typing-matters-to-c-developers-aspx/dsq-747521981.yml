id: dsq-747521981
date: 2007-12-17T22:07:02.0000000-08:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: "<p>@David Let's revisit your first IBar interface example with one method. Suppose I have implemented the interface with my own class Foo:<br><code><br>public interface IBar<br>{<br>  void Bar1();<br>}<br>public class Foo : IBar<br>{<br>  public void Bar1() {}<br>  public void Bar2() {}<br>}<br></code><br>In this case, Bar1() implemnets the interface, Bar2() is just some method I have on the class for other reasons.<br>Now you go and add Bar2() to the IBar interface and I recompile. Egads! I got no warning, yet Bar2 doesn't reasonably satisfy expectations for the interface.<br>Conclusion? Interfaces are dangerous.<br>Hardly! The conclusion is that anyone can come up with extremely unlikely edge cases and point to them as a problem with a particular style of development.<br>Software is fully of tricky potholes, some more common than others. Compiler checking is on a tiny sliver of validation for code. While it can be helpful, having a decent automated test suite covers a lot more cases than a compiler could ever cover. Testing isn't perfect and won't catch everything, but it's better than leaving it just to the compiler which has no idea about your intentions.</p>"
