id: dsq-747521982
date: 2007-12-20T21:09:22.0000000-08:00
name: David
avatar: https://disqus.com/api/users/avatars/David.jpg
message: <p>But again, as the interface implementer it my responsibility to know when the interface has changed and respond accordingly. Its about putting the responsibility in the right place. Dynamic languages in general put more responsibility on the end programmer instead of the class/library designer where it usually should be. That doesn't mean that the end programmer shouldn't be responsibile for verifying their programs, but the first responsibility is on the class designer.<br>A "decent" automated test suite is very difficult and expensive to create and maintain, and even then it only covers a limited number of cases. That doesn't mean its not worth using, but when I am creating a highly reliable mission critical system, I need every advantage I can get, including very strict compile time checking. Intentionally opening myself up to bugs by using dynamic language features which emphasize programmer convenience over program correctness is a good way to get myself fired.<br>Your example does indicate one of the few things that I like better about VB.NET than C#, which is that interface implementations should have to be explicit. The C# team was careful to mitigate the "brittle base class" problem, but for some reason they left this "brittle interface" problem, which is just another flavor of the same problem.<br>And if you really think that the situations that you and I outlined are edge cases, then you must not be dealing with the daily challenges of enterprise application development.</p>
