id: dsq-747524961
date: 2008-04-24T11:06:21.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>@DM the part you missed because I left it out is that there's pretty much no good reason to have a public method on a controller class be public unless you intend for it to be web callable. In other words, you <em>opt in</em> to this web callable behavior by inheriting from our <code>Controller</code> class and by hosting your class in our framework. So these things aren't web callable by accident.<br>And since every method in a controller is generally an <em>action</em> method and <em>intended</em> to be web callable, it's pretty repetitive to have to mark each one as web callable. You already told us you wanted these things to be callable by way of using our web framework and inheriting from <code>Controller</code>.<br>This addresses @Jeff's question too. The reason we still need the [NonAction] attribute (or equivalent) is there are ways in which a method might be public due to inheritance that you wish to hide. <br>For example, an abstract base controller for your company might have common actions and you're supposed to use it. But you want to hide one of those actions.</p>
