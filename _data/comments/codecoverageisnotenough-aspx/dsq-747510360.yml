id: dsq-747510360
date: 2004-11-09T12:07:00.0000000-08:00
name: Jonathan de Halleux
avatar: https://disqus.com/api/users/avatars/Jonathan de Halleux.jpg
message: "<p>A valuable technique for lowering the number of enumeration is pairwize testing... and it is supported by MbUnit. Let me illustrate that by writing \"combinatorial unit test for you example (note that I added a GetValue method to MyClass).<br><br><br><br>The CombinatorialTest attributes tells MbUnit to do a pairwize enumeration over the different data sample of each parameter. The Using*** atttibutes specify where the data should be get from. In this case, a method returning an array of keys is sufficient.<br><br><br><br>    [TestFixture]<br><br>    public class MyClassFixture<br><br>    {<br><br>        [Factory]<br><br>        public string[] GetKeys()<br><br>        {<br><br>            string[] keys = new string[3];<br><br>            keys[0] = \"keyOne\";<br><br>            keys[1] = \"keyTwo\";<br><br>            keys[2] = \"keyThree\";<br><br><br><br>            return keys;<br><br>        }<br><br><br><br>        [CombinatorialTest]<br><br>        public void Sumit(<br><br>            [UsingFactories(\"GetKeys\")] string key1,<br><br>            [UsingFactories(\"GetKeys\")] string key2<br><br>            )<br><br>        {<br><br>            MyClass mine = new MyClass();<br><br>            string[] keys = { key1, key2 };<br><br>            int sum = mine.GetValue(key1) + mine.GetValue(key2);<br><br>            Assert.AreEqual(sum, mine.SumIt(keys));<br><br>        }<br><br>    }<br><br><br><br><br><br>And here's the result in the output window using TD.NET:<br><br><br><br>Info: Test Execution<br><br>Info: Exploring MbUnit.Demo, Version=2.22.1.0, Culture=neutral, PublicKeyToken=null<br><br>Info: MbUnit 2.22.0.0 Addin<br><br>Info: Found 9 tests<br><br>Info: [assembly-setup] success<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyOne),GetKeys(keyOne))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyOne),GetKeys(keyTwo))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyOne),GetKeys(keyThree))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyTwo),GetKeys(keyOne))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyTwo),GetKeys(keyTwo))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyTwo),GetKeys(keyThree))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyThree),GetKeys(keyOne))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyThree),GetKeys(keyTwo))<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyThree),GetKeys(keyThree))<br><br>Info: [assembly-teardown] success<br><br>Info: [reports] generating HTML report<br><br><br><br><br><br>Humm, no bug... Ok, let's go for 3 arguments. This makes 15 tests using my pairwize algo:<br><br><br><br>Info: Test Execution<br><br>Info: Exploring MbUnit.Demo, Version=2.22.1.0, Culture=neutral, PublicKeyToken=null<br><br>Info: MbUnit 2.22.0.0 Addin<br><br>Info: Found 15 tests<br><br>Info: [assembly-setup] success<br><br>Info: [failure] MyClassFixture.Sumit(GetKeys(keyOne),GetKeys(keyOne),GetKeys(keyOne))<br><br>TestCase 'MyClassFixture.Sumit(GetKeys(keyOne),GetKeys(keyOne),GetKeys(keyOne))' failed:  Equal assertion failed: [[3]]!=[[4]]<br><br>MbUnit.Core.Exceptions.NotEqualAssertionException<br><br>Message:  Equal assertion failed: [[3]]!=[[4]]<br><br>...<br><br>Info: [success] MyClassFixture.Sumit(GetKeys(keyOne),GetKeys(keyOne),GetKeys(keyTwo))<br><br>...<br><br><br><br>That's much better because we hit the test. So what do you think ?</p>"
