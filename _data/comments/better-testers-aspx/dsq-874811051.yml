id: dsq-874811051
date: 2013-04-24T17:52:59.0000000-07:00
name: Tom Ritter
avatar: https://disqus.com/api/users/avatars/Tom Ritter.jpg
message: <p>Very insightful, and I can't say I fully made the connection myself... even considering my background.  I started as a Web Developer (ASP.Net WebForms) in a Financial Services company.  We thankfully weren't one of the Daily WTF companies - we cared about the quality of our code, and our alumni went on to Etsy among other similarly advanced shops.  We had QA in India, and they were treated as second class citizens.  It also kind of bugged me - I felt we should be testing more ourselves, writing more unit tests, building frameworks.  When I did some of that myself (as did some other devs on other teams) and worked more with QA to make their lives easier - my area's quality went up.</p><p>I left that company to go do security testing, and 2 1/2 years later, I'm at one of the more specialized and high end consultancies.</p><p>I think I still have a few more years in the field until I figure out how the 'wins' I made as a developer working with QA (unit tests) can be applied generally to security testing and development.  Every app I test is so varied maybe they can't.  (As an example, imagine a framework that logs in as normal user A and tries hitting every single URL route in your app, including ones they shouldn't have access to.  How to detect that a load failed or succeeded is different in every single app; and how to determine if a user should or shouldn't be able to see the page is also different.)  Perhaps there is no general way, which is why security scanning services (Veracode, Nessus, WebInspect, etc) are never as thorough as a person.</p><p>Etsy (and specifically Zane Lackey) I think has made a lot of those wins by taking a security tester (Zane, who used to work at my company) and putting him in a role where he can dictate development practices (query standards, logging standards, etc) such that you *can* detect dangerous things (or just 'weird' which usually means dangerous but you don't know how to exploit it).  His presentation on security at Etsy is well worth a read.</p><p>And I think the model of getting a good tester (security or otherwise) the pull to dictate development practices is good. (I'm not sayin make them a boss, I'm sayin give them strong input.) As a final example, going back to my first job - we would often have bad data.  Testers spent a lot of time writing up bugs about bad data.  We decided to cut out the middle man and architect a way to catch that long before they had to test for it.  Had the testers had the pull to do that, we would have been developing better, sooner.</p>
