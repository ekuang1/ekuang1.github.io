id: dsq-747519236
date: 2007-03-15T21:03:09.0000000-07:00
name: Steven Harman
avatar: https://disqus.com/api/users/avatars/stevenharman.jpg
message: <p>Good tutorial Phil.<br>I actually dealt with this not too long when I tried to build an AJAXified Tabstrip control by mashing-up the ASP.NET Menu control with an unordered list. Of course, <em>the next day</em> the <a href="http://www.codeplex.com/AtlasControlToolkit" rel="nofollow noopener" title="http://www.codeplex.com/AtlasControlToolkit">AJAX Control Toolkit</a> team released the <a href="http://ajax.asp.net/ajaxtoolkit/Tabs/Tabs.aspx" rel="nofollow noopener" title="http://ajax.asp.net/ajaxtoolkit/Tabs/Tabs.aspx">Tabs control</a> and all of my work went right out the window.<br>One thing that may not be obvious to those new to this type of state maintenance code is that you can store the state of multiple private members in the Control State array.<br>For example, if your <code>SubControlStateDemo</code> class had a second property, <code>YetAnotherCount</code> that was backed by the local member <code>int yetAnotherCount</code> your SaveControlState method would change like so:<br><code>object thisState = new object[] {baseState, this.anotherCount, <strong>this.yetAnotherCount</strong>};</code><br>And the LoadControlState method would need to pull both local members back out:<br><code>this.anotherCount = (int) stateLastRequest[1];</code><br><code>this.yetAnotherCount = (int) stateLastRequest[2];</code><br>The base control's ControlState object is <strong>always</strong> the first object in the array (position 0) and your control's state data will fill the rest of the array. This is guaranteed as long as each each level down the inheritance chain behaves nicely and pushes their stuff onto a growing stack of state data. You <strong>gotta love the stack!</strong></p>
