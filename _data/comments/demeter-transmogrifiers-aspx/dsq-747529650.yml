id: dsq-747529650
date: 2009-08-18T01:55:00.0000000-07:00
name: Jon
avatar: https://disqus.com/api/users/avatars/Jon.jpg
message: "<p>@haacked That study does not look at the Law of Demeter though, it is and analysis of a set of metrics proposed for measuring the likelihood that an individual C++ class contains faults. One of the metrics is Coupling Between Object classes, and yes, it is found to have apparently significant relationship with the probability of fault detection. <br>This says 'a highly coupled class is more likely to have faults', which I would not dispute, but it is a big leap to say it therefore supports applying the 'Law of Demeter'. For example, an obvious objection that springs to mind just from this study is that applying the 'Law of Demeter' could lead to an increase in at least two other metrics it looks at, namely Weighted Methods per Class and Response For a Class, both of which were found to be as, or more, significant as Coupling Between Object classes in determining the likelihood of faults.<br>So, if I were feeling mischievous, I could just as easily claim this study supports <em>not</em> using the 'Law of Demeter'. If I were being more reasonable, I would say that the metrics that it sets out to investigate, including the level of coupling, appear to be good indicators of the likelihood of faults in OO code. It would be a good starting point for further studies, that could investigate areas such as the severity of faults, the effect of different strategies for reducing each metric (such as the 'Law of Demeter'), and the effect of these strategies on other metrics, and overall quality. I certainly would not make any pronouncements on best practices in real-world software development and, unsurprisingly, neither do the authors of the study. Their 'Conclusions and Further Work' section lists a number of fascinating potential futures studies, but it does not endorse any kind of strategy for reducing coupling, or any other metric.<br>I think the above illustrates two points: Firstly, that the evidence given for the 'Law of Demeter' <em>is</em> anecdotal, in this case the anecdote being that a study was conducted and was found to support using the 'Law of Demeter', when in fact this is a misrepresentation of its conclusions. Secondly, that software development, software architecture, and software quality, are very complex and subtle topics, which need a lot of careful study and consideration.<br>This brings me back to the point I was getting at in my previous post, which is not that high coupling is fine, or that reducing it where appropriate is bad, but that reductive rules like the 'Law of Demeter' do not help, and often hinder, as they distract the developer from focusing on the actual requirements of the system, and instead waste their time on considering the situation applicability of the 'law' itself.<br>Wow, that turned out to be a bit of an essay.</p>"
