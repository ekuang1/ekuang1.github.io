id: dsq-747523396
date: 2007-11-16T02:43:46.0000000-08:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: "<blockquote>- prove your algorithms are correct. You as a Math major must know that this is doable<br>- check your implementation of the algoritms by proving you did that correctly</blockquote><p><br>It is doable in trivial cases, but such algorithms are a tiny percent of a real application. Imagine trying to prove the correctness of SharePoint. <br>Not only that, let's say you can prove every algorithm and the composition of algorithms in an application. Your user wants to make a change. Now what? You have to re-prove every area of the code touched by the change? Do you have a proof that only those areas are touched by the change? I'm sure you separated concerns, but did you prove that your concerns are separated well enough? Can you prove all that in a reasonable amount of time? What about decisions made via external systems like a database or a service call?<br></p><blockquote>If you think a lot of people who write unit-tests have the firm believe that their tests don't prove their software works, you're wrong: a LOT of people think that.</blockquote><p><br>And a lot of people send money to spammers in Nigeria. I don't think many developers of reasonable sanity and intelligence believes that. It's still a straw man argument to me. <br>Feel free to prove me wrong. Can you point me to someone who [preaches|teaches|is an authority] on testing that says that? If so, let's censure them because they're nuts! ;)<br>Tests (and I'm not limiting myself to unit tests, let's include Integration and System Tests) provide an <strong>approximation</strong> that an application works.<br>Even with proofs, you have to make sure your spec covers everything. The Tacoma Narrows bridge collapse is a great example. They most certainly had engineering \"proofs\" that the bridge would manage the stress. But their \"spec\" didn't take into consideration harmonic oscillation caused by wind, so the proof wasn't enough.<br>So while I agree with you that <a href=\"https://haacked.com/archive/2004/11/03/CodeCoverageIsNotEnough.aspx\" rel=\"nofollow noopener\" title=\"Code Coverage\">Code Coverage is not enough</a> (as I've written before), I'd say proving correctness is not enough because you can't prove the correctness of the spec in meeting customer needs to begin with.</p>"
