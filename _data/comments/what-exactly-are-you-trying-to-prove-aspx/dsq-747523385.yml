id: dsq-747523385
date: 2007-11-15T17:15:45.0000000-08:00
name: Frans Bouma
avatar: https://disqus.com/api/users/avatars/Frans Bouma.jpg
message: "<p>Also, your CAPTCHA example illustrates why focusing on testability is useless: so you are able to write 100 unittests to see if your code works. It still proves nothing if your code can break the captcha in a random image I throw at it. That's why I said: \"the set of tests prove that your code is correct in the solution space defined by the tests.\" You might say \"I get more confidence with every test which succeeds\", but that's just telling yourself you're doing great without any real reason to base that that on. If your software ends up in a mission critical application, you can't say \"I'm pretty confident\", you have to say \"I KNOW it will work, BECAUSE...\". <br>Take a library which performs o/r mapping features for you. You can write a million unittests for it, and it still can break with the easiest query you can throw at it, simply because the scope of the thing is so incredibly wide. That's thus not going to work, even with 100% code coverage. Tests certainly help, I'm not denying that, they are a useful tool and we use them a lot. The thing is though that by NOT focusing on testability but on provability, you have AND testability (due to the separation of concerns as I discussed as well) AND you can prove your algorithms, the foundation of your software works.</p>"
