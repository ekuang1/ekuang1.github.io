id: dsq-747524128
date: 2008-02-07T23:08:30.0000000-08:00
name: Will Shaver
avatar: https://disqus.com/api/users/avatars/Will Shaver.jpg
message: <p>Just got finished writing a framework to assist with unit testing the MVC. (Currently on my blog, I'll probably be submitting it to MVC Contrib.) There were a couple of spots that were particularly annoying. <br>Mocking the session is perhaps the most difficult aspect of unit testing controllers. HttpSessionStateWrapper is of course marked internal, and HttpSessionState (contained by the wrapper) is public sealed with an internal constructor. Specifically mocking the saving of variables and retrieving of variables is difficult.<br><code><br>MyController mc = new MyController(); // or use a factory<br>mockedSession["variable"] = "value";<br>mc.ActionWhichUsesSession();<br>Assert.AreEqual(mc.HttpContext.Session["variable"],"value")<br></code> <br>Part of the difficulty comes in the fact that HttpContext exposes a property indexer to save and retrieve items.<br>Also annoying was RedirectData and RedirectDataWithController being marked as internal. These are used in the RedirectToAction function internally, and when passing strings for the action and controller to RedirectToAction(string,string) it creates these classes. When overriding the virtual RedirectToAction one must iterate over PropertyInfo objects instead of just doing an "is" comparison on the type.<br></p>
