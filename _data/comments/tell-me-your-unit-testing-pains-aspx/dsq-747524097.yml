id: dsq-747524097
date: 2008-02-05T23:10:51.0000000-08:00
name: Jason
avatar: https://disqus.com/api/users/avatars/Jason.jpg
message: <p>I'm yet new to the unit testing world so I might be doing a lot of things wrong, but I'd like to chime in as a newbie.<br>I think Chris has one point that I agree with. If a class (or a presenter) has a method A, B, and C, and both A and B call method C, how can i avoid writing the unit test for C twice? So I have a unit test for C, a unit test for B, and a unit test for A. Do I just call unit test C from Unit Test A and B? or do I repeat it in each unit test? It doesn't seem like a pure "unit" test if I call unit test C from A and B.<br>Another pain point I have is testing the Data Access objects. We're not using any database mock objects (mainly due to the fact we started the project using an OR mapping framework, which is gone now). We were actually putting all the DB calls in a transaction so that everything gets rolled back after the test. The bad side is I'd have to write sql scripts to do unit tests. For example, if I need to test a Delete or Update, I need to first do an Insert, which may not exist at the time of testing.<br>Another struggle I've had with using dynamic mock views on the UI in a MVP pattern, is that a lot of my unit tests seemed meaningless. For example, certain methods just are there to set the properties of my view just to populate a form with a lot of fields. So I end up writing meaningless Expect's just to say a bunch of Expect.MyView.FirstName.To(anyhting); Expect.MyView.LastName.To(anything); ... etc<br>If I add another field to the form, the unit test fails because I'm missing that extra Expect call for that added field.</p>
