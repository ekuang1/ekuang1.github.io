id: dsq-747527609
date: 2009-01-04T15:29:14.0000000-08:00
name: Atif Aziz
avatar: https://disqus.com/api/users/avatars/Atif Aziz.jpg
message: <p>Phil, the main cost in James's implementation comes from, believe it or not, instantiating the <code>Regex</code> object on each call. If you factor out this cost, you'll find that it performs far better than implemenations from Hanselman and Oskar and only marginally less than your hand-made version.<br>The obvious way to factor out the <code>Regex</code> instantiation cost is to do it once during type construction and tuck it away into a static field that is then re-used in <code>FormatWith</code>. The less obvious way would be to simply use the static version of <code><a href="http://msdn.microsoft.com/en-us/library/ms149475.aspx" rel="nofollow noopener" title="http://msdn.microsoft.com/en-us/library/ms149475.aspx">Regex.Replace</a></code> and do away with new-ing a <code>Regex</code> object on each call. The <em>static</em> methods on <code>Regex</code> use an internal cache whereas the using the constructor bypasses the cache (more on this later).<br>Here are the numbers from my machine to prove the case. First off, here's just downloading and running <code>NamedStringFormatConsole</code> from your solution.<br>Hanselformat took 0.3042 ms<br>OskarFormat took 0.2934 ms<br>JamesFormat took 11.3133 ms<br>HaackFormat took 0.1373 ms<br>I then modified <code>JamesFormatters.FormatWith</code> to use the static <code>Regex.Replace</code> method so that the cache gets involved. Here are the numbers with this change:<br>Hanselformat took 0.2765 ms<br>OskarFormat took 0.3137 ms<br>JamesFormat took 0.1699 ms<br>HaackFormat took 0.1373 ms<br>Given this, your version is around only 20% faster than the next fastest version, which now happens to be <code>JamesFormatter</code>. 20% could still mean a lot for a very tight loop, but what I wanted to point out is that the real cost is not using regular expression parsing as such and therefore may not warrant the need to hand-write the parsing logic and create further abstractions. What one can take away from all this dialogueis that <code>DataBinder.Eval</code> and regular expressions can give you a lot of mileage while keeping the code simple before any need for optimization may arise.<br>Finally, see <a href="http://blogs.msdn.com/bclteam/archive/2006/10/19/regex-class-caching-changes-between-net-framework-1-1-and-net-framework-2-0-josh-free.aspx" rel="nofollow noopener" title="http://blogs.msdn.com/bclteam/archive/2006/10/19/regex-class-caching-changes-between-net-framework-1-1-and-net-framework-2-0-josh-free.aspx">Regex Class Caching Changes between .NET Framework 1.1 and .NET Framework 2.0 [Josh Free]</a> for more information on the caching behavior of the <code>Regex</code> class as well as how that behavior was changed for the constructors to bypass the cache between 1.1 and 2.0.<br></p>
