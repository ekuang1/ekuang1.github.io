id: dsq-747538390
date: 2012-09-29T22:56:06.0000000-07:00
name: haacked
avatar: https://github.com/haacked.png?size=120
message: <p>A dynamic language certainly removes some of the ceremony of what I'm doing, but I'm not sure a dynamic language solves the specific problem I'm solving. Perhaps I wasn't clear about my goal.<br>What I'm trying to do is to be able to fuzzily extract structure from an incomplete partially valid value.<br>Typically, when we think of user input, it's either valid or invalid. But sometimes values are <em>partially</em> valid. In other words, there's parts of the value that can be extracted and displayed while the user continues typing. Kind of like a password strength indicator.<br>For example, suppose I want the UI to display and validate the drive letter of a file path separately from the full path while a user is typing in the path.<br>When the user types the first letter, I might not display something. But as soon as they type a ":", as long as its preceded by a letter, I can guess what the drive is.<br>Suppose the user ends up typing <code>c:\foo|bar\</code>.<br>At this point, this is not a valid file path. The bar character is not allowed in a file path. So even with a dynamic language using a proper Path type, you wouldn't be able to extract the drive letter because the type would just say, "This ain't a path. What the hell do I know."<br>It's important to note that I'm not making any decisions based on this data. I'm just displaying what I know. I won't make decisions until the value is valid.<br>To accomplish this, I have types which represent user input and the <em>intent</em> of that input. I can show in the UI that the value is invalid, but I can also show what parts are valid <em>so far</em>.<br>When entering a url, I might show the host name. So you have <code>Uri</code> which is strict and <code>UriString</code> which might be better named as <code>UriInput</code> which represents the input that's intended to be a <code>Uri</code> but might be incomplete or partially invalid. Consider that I'm binding the input control value to view model property of this type on every keystroke.<br>So in a dynamic language, I'd still need these two types. But, I wouldn't need to write the code to coerce one to another. Duck typing would fill that need just fine. So in that case, a dynamic type would mean much less code to write. But the original problem I'm solving is still there.</p>
