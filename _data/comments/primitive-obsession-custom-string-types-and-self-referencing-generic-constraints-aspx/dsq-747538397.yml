id: dsq-747538397
date: 2012-09-29T23:25:49.0000000-07:00
name: smartcaveman
avatar: https://disqus.com/api/users/avatars/smartcaveman.jpg
message: <p>I get what you're saying about invalid user input not being exceptional.  I guess my problem with it is that I don't see anything explicitly requiring that the class only be used for user input.  Validity is meaningless without context, and I wasn't clear on the context.  Why did you choose a name like <code>ZipCode</code> instead of something more descriptive of your intention like <code>ZipCodeInput</code> or <code>ZipCodeCandidate</code>? If you're the only one using the <code>ZipCode</code> class, then it's probably not an issue, but the name seems to imply that it actually represents that type of data (and should enforce any implied contracts).  As written, it seems likely to be misinterpreted by a client programmer who just needs a ZipCode class.<br>On another note, I know that I routinely have to work with constrained-string classes in both the business layer and the UI layer.  With an approach like this one, it seems likely that the validation logic would end up being duplicated.  How do you avoid that?  Also, what is your design like for a strongly typed string in the domain/business layer?</p>
