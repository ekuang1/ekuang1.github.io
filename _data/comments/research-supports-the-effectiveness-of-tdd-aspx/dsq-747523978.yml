id: dsq-747523978
date: 2008-01-24T12:08:35.0000000-08:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>@Jacob Even if you had 100% test coverage, it <a href="https://haacked.com/archive/2004/11/03/CodeCoverageIsNotEnough.aspx" rel="nofollow noopener" title="Code Coverage Is Not Enough">wouldn't be enough</a>. For library code or code with few "side effects" it's nice to strive for something close to total coverage, but for most code, 100% starts to get asymptotic and not worth the benefit.<br>@Jay as always, we're cool. :)<br>@Isaac Scientific principles doesn't mean you necesarily understand all the science. For example, people built steam engines before understanding the physics behind the engines. Once they did, engine quality improved immensely. To me, it was still engineering before they understood the science. They experimented, figured out what worked for them and what didn't, and continued to make improvemens. Those are the scientific principles.<br>For TDD, it solved a problem I ran into. Large code bases that were hard to change and hard to vouch for the quality. Once I got my team (back in the day) writing tests, the quality improved. I didn't keep stats, but I don't need a luminosity meter to know when it's sunnier one day more than another. Our clients were happier, the number of bugs in production declined to nearly zero, and we were able to make changes to the system much easier.<br>It's like beer. Back in the day, people got sick drinking tainted water. But they didn't get sick drinking beer. So they brewed and drank beer, with no understanding or confirmation of why it worked. The science came later, but really, who waited around for that to get the benefit of beer!</p>
