id: dsq-747523995
date: 2009-02-10T07:24:42.0000000-08:00
name: Chris
avatar: https://disqus.com/api/users/avatars/Chris.jpg
message: <p>Like other people I am still hesitant to apply TDD. Here are some doubts in my mind:<br>1. Those TDD survey results that companies published are bias in my opinion. I have never come across an article about companies that used TDD and failed and I don't think it's possible that there weren't any.<br>2. I haven't yet read articles or blogs that mentioned about the benefits of TDD like:<br>a. Code quality - nobody will argue with this so let's skip this *<br>b. Overall cost of the project - is it expensive?<br>c. Overall development time - was it shortened?<br>d. Maintenance cost - ROI benefits?<br>3. Part of software development is about negotiations and estimates. If your estimate is too expensive then the client will look for an alternative solution or better yet look for cheaper companies that will still produce high quality software. So the phrase "in time cost will be forgotten because of quality", mentioned by TDD followers, as their justification to cost, will not be applicable, correct?<br>4. TDD is about design so it encourages developers to design their classes well. So I'd assumed that in TDD, developers == architects? If the answer is no then isn't there a possibility that there will be duplicate classes everywhere if 10 developers start writing their own classes and/or interfaces as they see fit?<br>5. Two set of codes to maintain. Change request means two sets of code to fix. Is this something like a trade off when using TDD? Or, is this the price that we have to pay for the sake of "quality"? How do you justify the maintenance/development cost to your client given that you also have a QA department to test the application?<br>6. If developers writes tests then who tests their tests? An endless loop? A developer that writes crappy code will get away with this practice if no one validates his work, right?<br><br></p>
