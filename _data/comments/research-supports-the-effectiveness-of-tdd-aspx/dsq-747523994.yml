id: dsq-747523994
date: 2009-02-10T01:34:02.0000000-08:00
name: Scott
avatar: https://disqus.com/api/users/avatars/Scott.jpg
message: "<p>I'm working on two projects simultaneously. On one, I'm mandated to use TDD. On another, I am not. In fact, I'm using no testing at all. Both are commercial projects that need to be bug free.<br>I hear some of you screaming! No testing? At all? Arrest that man!<br>The thing is, I am VASTLY more efficient working without writing tests. It isn't simply laziness: I get more done in a day if I don't have to write tests, and I don't think my code is any worse for it.<br>How can that be? Well, I've been doing this for twenty years. I'm good at what I do, and I test my code as I go - usually by setting a breakpoint and stepping through it. Very occasionally I'll write a test for a particular algorithm. Often I'll either remove it when I'm done, or I'll leave the test in the working code to be run only in debug mode.<br>Instead of using \"mock data\" - which I have to create myself, and which may not be representative of the real data the program will use - I test against the real deal.<br>In my experience:<br>- It's very difficult to write tests that catch the hard stuff: memory leaks, memory corruption, thread blocking, API bugs, race conditions, etc.<br>- It's hard to write tests that exhaustively test functions.<br>- Tests, particularly exhaustive tests, are difficult to read and so don't serve to document code.<br>- \"Mock data\" only represent a set of assumptions, not real world data.<br>- An incorrect test is worse than one at all.<br>For me, programming is both a creative act and an act of discovery. I often come to one solution by trying a different one first and then having an insight that leads me to something better. I cannot design this way through writing tests.<br>And finally, I've yet to see our tests catch a single bug, and I've only very rarely gotten any value out of them as \"documentation\".</p>"
