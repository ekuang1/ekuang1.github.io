id: dsq-747521314
date: 2010-10-19T03:20:17.0000000-07:00
name: Gabriel Halsmer
avatar: https://disqus.com/api/users/avatars/Gabriel Halsmer.jpg
message: "<p>Here's the basic code you need...<br><code><br>    #region fake HttpContext and session<br>    static void InitializeSession()<br>    {<br>        var tw = new System.IO.StringWriter();<br>        var wr = new System.Web.Hosting.SimpleWorkerRequest(\"/webapp\", \"c:\\\\inetpub\\\\wwwroot\\\\webapp\\\\\", \"default.aspx\", \"\", tw);<br>        HttpContext.Current = new HttpContext(wr);<br>        HttpContext.Current.Items.Clear();<br>        var session = Activator.CreateInstance(typeof(HttpSessionState), BindingFlags.NonPublic | BindingFlags.Instance, null, new object[]{new SimpleHttpSessionState()}, null);<br>        HttpContext.Current.Items.Add(\"AspSession\", session);<br>    }<br>    public class SimpleHttpSessionState : NameObjectCollectionBase, IHttpSessionState<br>    {<br>        private string sessionID = Guid.NewGuid().ToString();<br>        private int timeout = 30; //minutes <br>        private bool isNewSession = true;<br>        private int lcid;<br>        private int codePage;<br>        private HttpStaticObjectsCollection staticObjects = new HttpStaticObjectsCollection();<br>        private object syncRoot = new Object();<br>        public void Abandon() { BaseClear(); }<br>        public void Add(string name, object value) { BaseAdd(name, value); }<br>        public void Remove(string name) { BaseRemove(name); }<br>        public void RemoveAt(int index) { BaseRemoveAt(index); }<br>        public void Clear() { BaseClear(); }<br>        public void RemoveAll() { BaseClear(); } /// <br>        public void CopyTo(Array array, int index) { throw new NotImplementedException(); }<br>        public string SessionID { get { return sessionID; } } /// <br>        public int Timeout { get { return timeout; } set { timeout = value; } } /// <br>        public bool IsNewSession { get { return isNewSession; } } <br>        public SessionStateMode Mode { get { return SessionStateMode.InProc; } } /// <br>        public bool IsCookieless { get { return false; } } <br>        public HttpCookieMode CookieMode { get { return HttpCookieMode.UseCookies; } } <br>        public int LCID { get { return lcid; } set { lcid = value; } } /// <br>        public int CodePage { get { return codePage; } set { codePage = value; } } /// <br>        public HttpStaticObjectsCollection StaticObjects { get { return staticObjects; } } /// <br>        public object this[string name] { get { return BaseGet(name); } set { BaseSet(name, value); } } /// <br>        public object this[int index] { get { return BaseGet(index); } set { BaseSet(index, value); } } /// <br>        public object SyncRoot { get { return syncRoot; } } /// <br>        public bool IsSynchronized { get { return true; } } /// <br>        bool IHttpSessionState.IsReadOnly { get { return true; } }<br>    }<br>    #endregion<br></code></p>"
