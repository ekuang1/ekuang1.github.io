id: dsq-747521223
date: 2007-06-19T21:44:11.0000000-07:00
name: Chris May
avatar: https://disqus.com/api/users/avatars/Chris May.jpg
message: <p>I am trying to use MVP on some of my webforms for testing purposes.<br>Do you know if there is in depth/complex  examples out there of how to go about doing this?<br>I know there is a simple form example of MVP on this site, but I am looking for something a little more complex.  I basically have 2 questions in my mind:<br>1) Should the view "pull" its info, or should it be "pushed" to the view.  Say for example you have something where a user enteres something in a textbox, clicks a button, and a datagrid is populated.  You could have the view do this:<br>controller.NewSearchEntered(this.txtSearch.Text())<br>and the controller would do:<br>void NewSearchEntered(string text){<br>  // get data from DB<br>  view.PopulateResults(someDataset);<br>}<br>but I have seen other people doing it where the view asks for it's information from the controller like:<br>ds = controller.GetSearchResults(this.txtSearch.Text());<br>this.dg.DataSource = ds;<br>this.dg.DataBind();<br>This is a trivial example, but it seems like the controller is losing control in the 2nd example and in many ways is being delegated a kind of data access layer.<br>I would be interested to see how others deal with this.<br>2) How much logic should go in the view? (even UI logic).  For example, in order to test some of my stuff, I have started adding methods to my view interface like SetErrorMessage(string), HideDetails(), EnableSaveButton() that are called by the controller based on business logic.<br>But these methods are very shallow wrappers around stuff like "this.lblError.Text = s" or "this.dgDetails.visible = false".<br>It allows me to test using a mock of my view, b/c I can test that EnableSaveButton was called, meaning that it WAS enabled.<br>But I am wondering if I am getting too detailed with these things and should put more of this logic in the view/UI.<br>I have been using your previous HTTP simulator, so I look forward to this upgrade!<br>Chris May</p>
