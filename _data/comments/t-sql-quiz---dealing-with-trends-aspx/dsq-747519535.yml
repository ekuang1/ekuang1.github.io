id: dsq-747519535
date: 2007-04-09T21:47:42.0000000-07:00
name: Jon Galloway
avatar: https://disqus.com/api/users/avatars/Jon Galloway.jpg
message: <p>I wrote up a solution last night but didn't post it because I had inside information on your solution. Interestingly enough, I not only used the same solution as [)amien, I used the same column name. As he indicated, using a float weight column allows you to do more with your aggregations. For instance, Analysis Services can use it as an Operator column which handles weighted rollups.<br>Why didn't I mention that yesterday when you chatted me about it? Because I was saving it for comments on the inevitable blog post... no, not really. I just didn't get the problem until you'd spelled it out all pretty like, with diagrams and stuff.<br>insert into statistic(id, title) values (4,'Deaths per LOC')<br>alter table statistic add weight float<br>update statistic set weight = 1.0 where title != 'Deaths per LOC'<br>update statistic set weight = -1.0 where title = 'Deaths per LOC'<br>ALTER PROC [dbo].[Statistics_GetForDeveloper](<br>@Developer nvarchar(64)<br>)<br>AS<br>WITH MeasurementCount(StatisticId, MeasurementCount) AS<br>(<br>SELECT s.Id<br>,MeasurementCount = COUNT(1)<br>FROM Statistic s<br>LEFT OUTER JOIN Measurement m ON m.StatisticId = s.Id<br>GROUP BY s.Id<br>)<br>SELECT <br>Statistic = s.Title<br>, Developer<br>, CurrentScore<br>, PreviousScore<br>, mc.MeasurementCount<br>, TrendFactor = Weight * (CurrentScore - PreviousScore)/mc.MeasurementCount<br>FROM Statistic s<br>INNER JOIN MeasurementCount mc ON mc.StatisticId = s.Id<br>LEFT OUTER JOIN Measurement m ON m.StatisticID = s.Id<br>WHERE Developer = @Developer<br>PRINT 'haacked is teh 5uxx0r'<br>GO</p>
