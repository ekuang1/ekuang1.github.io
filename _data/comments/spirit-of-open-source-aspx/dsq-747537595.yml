id: dsq-747537595
date: 2012-02-22T13:43:47.0000000-08:00
name: David Haze
avatar: https://disqus.com/api/users/avatars/David Haze.jpg
message: <p>Geez Phil,<br>This is another long noise-filled rant to somehow prove your ex-step child ASP.NET MVC exhibits the "Spirit of OSS" of other projects. <br>I want to be expressly clear here "ASP.NET MVC" is not and should not be the poster child of OSS.<br>As you've noted earlier MVC is "tossed over the wall OSS" - this is not the same as "Spirit of OSS" projects which fosters collaboration and accepts external contributors and fixes where the turnaround time for fixes in active OSS projects is much greater. You work at GitHub now so you should know the difference. In fact MVC OSS might as well be hosted on a FTP site since most of the features of a collaborative DVCS like Git/Hub dont make it into consideration in the development of the project. <br>Also lets not forget that MVC's best feature Razor is not OSS and Razor is pretty much tied to MVC since VS.NET intellisense breaks for any other web framework that wants to make use of it.<br>The commercial reality is there will never be a successful fork of MVC which remains the only popular "OSS" web framework that doesn't accept outside contributions. So what doesn't get created and shipped by Microsoft will never see the light of day. <br>And these long release cycles on MVC means it takes forever to get relevant features shipped in the default install - case in point Bundling and minification which has only now made it into MVC 4 years after any other pro OSS web framework. In the years that this feature was absent there were plenty of OSS .NET projects to fill this void - what has happened to these projects now? They will effectively be killed by the default MVC option. So rather than working with the external the .NET OSS community - potentially contributing and enhancing one of the existing options, MS releases actively kills them - pushing their preferred proprietary tools at every turn. Because of this we now have non-OSS libs like EntityFramework bundled by default. Now tell me which true "OSS" project  prefers "non-OSS" proprietary components in their defaults?<br> <br>This is because MS &amp; MVC doesn't accept a single external .NET project, even the popular ones - so you'll find the selection criteria of the default options aren't based on popularity, merit or community input. <br>There's plenty wrong with MVC and there's a lot of devs wanting to add fixes to it, but MS's reluctance to take on external contributions will ensure any fixes/helpers won't make it into the core project.  If developers have an issue or want to by-pass a leaky abstraction they have no re-course but to constantly add work arounds which is in contrast to "true OSS" projects who immediately patch their own fork and send a pull request so there feature makes it into the core mainstream branch. Or otherwise gets rejected where another solution would be proposed or a capability added so it makes it easier to extend in future - either way the project evolves with outside influence. <br>This is how "true OSS" projects evolve - and MVC doesn't meet this definition.<br></p>
