id: dsq-747522809
date: 2007-09-24T00:19:04.0000000-07:00
name: The Other Steve
avatar: https://disqus.com/api/users/avatars/The Other Steve.jpg
message: <blockquote>I’m sorry, but I’m not a fan of Bug Driven Development. I think Test Driven Development is not without its challenges, but it’s a better alternative. Either you’re with us, or against us. Are you a bug lover? Bug Driven Development gives comfort to the bugs.</blockquote><p><br>Not a great way to win over friends.<br>Most people I know are not opposed to writing tests.  What is lacking, is a good explanation as to how.  Especially since most development done today is on an existing code base.  I think evangelizing TDD could better be served by helping to show how easy it might be in the long run and helping people get past that initial learning curve.<br>The app I've been working on the past year at work is a gigantic collosal mess which was developed using the <a href="http://www.laputan.org/mud/" rel="nofollow noopener" title="http://www.laputan.org/mud/">Big Ball of Mud Methodology</a>.  There's no way to unit test this mass... I have a hard enough time just stepping through the code.  Which leads me to another observation.  It appears that TDD only works well with certain application architectures.  I've recently been working with the MVP pattern you talked about earlier in a side project at home.  Once I got that working, things started going together much easier.  It was hard to get the first feature working, but as I added new functionality it was a breeze to put in place.  But that's a way of development that in my experience, most people don't know or do.<br>Again, people aren't opposed.  It's just hard to see how you get from big ball of mud to something good.<br>And make it idiot proof enough that even the idiot on your team can understand. (Remember that 80% of developers in the real world are nowhere near as bright as the other 20%)<br></p>
