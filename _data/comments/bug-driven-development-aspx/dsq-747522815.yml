id: dsq-747522815
date: 2007-09-24T01:33:11.0000000-07:00
name: Mr. Teflon
avatar: https://disqus.com/api/users/avatars/Mr. Teflon.jpg
message: <p>I don't need no stinkin' TDD, I line my software up with Teflon, bugs just bounce off! :-)<br>I think that the answer is always it depends. It depends on the team that you have, quality of the developers.<br>For example, I have been working on a very complex library with over 200,000 lines of code (written from scratch) for last 5 years with changes and additions made almost every single day. I do not have many tests for that library, yet it is of very high quality with over 10,000 deployments.<br>There are bugs of course but there just aren't that many given the size of the project. Looking at my accurate release notes over 5 years, there were more features added than bugs found.<br>So what is the secret here? First, I am one and the only one working on that code. Second, I do not under any conditions commit the code that I have not executed, lot of times line by line in debugger, to make sure it works. I can't stress how important this last step actually is.<br>It works great for me.<br>However, once you get into the teams, not everyone can be this disciplined. Actually most people aren't. I've seen people check in branches of code that I know they did not execute. I have seen people check in the code that even breaks the builds... That is where TDD and continuous builds help. <br>Actually thinking about it, if you have more than 2 people working on the code base you should be well served with having at least some tests as part of your code base.</p>
