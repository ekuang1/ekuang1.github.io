id: dsq-747522813
date: 2007-09-24T00:30:36.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <blockquote>What is lacking, is a good explanation as to how. Especially since most development done today is on an existing code base. I think evangelizing TDD could better be served by helping to show how easy it might be in the long run and helping people get past that initial learning curve.</blockquote><p> <br>I've heard good things about the book, <a href="http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;tag=youvebeenhaac-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0131177052" rel="nofollow noopener" title="Working With Legacy Code on Amazon.com">Working With Legacy Code</a>. I haven't read it myself yet, but I've personally had a lot of success adding unit tests after the fact to code and applying structured refactorings.<br>Case in point, when I started with Subtext (taking the existing .TEXT code) there were 0 unit tests. Now there are 785 and 36% code coverage (and counting!).<br>Now granted, .TEXT was no ball of mud, but testing after the fact can be done. <br>I've worked with balls of mud in the past and the approach I took was iterative. Anytime I had to fix a bug, I would try to write a test that fails because of the bug, then fix the bug and make sure that the test passes because of the fix.<br>Many times, I could find small chunks of code I could factor out into its own method. Over time, a ball of mud can get refactored into something nicer and more testable. But it takes discipline and patience.</p>
