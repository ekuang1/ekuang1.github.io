id: dsq-747522814
date: 2007-09-24T00:44:04.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <blockquote>Even if TDD eliminates 75% of the bugs – and how likely is that – the situation is qualitatively the same. You still need to expose the product to testers and field users – “Bug-Driven Development.”</blockquote><p><br>I'm definitely not arguing against that point. As I've <a href="https://haacked.com/archive/2005/10/19/problem-with-extremism.aspx" rel="nofollow noopener" title="Problem With Extremism">said before</a>.<br></p><blockquote>Automated unit tests are NOT a replacement for system testing, beta testing, integration testing, nor any other kind of testing. Unit tests are only one small part of the testing equation, but they are an important part, just as all the other types of testing are important.</blockquote><p><br>The point is not that you're going to be able to eradicate all bugs. Rather, it's using all tools at your disposal (in their proper contexts) to gain the upper hand against having bugs run your schedule.<br>Sure, TDD may not work so well in all contexts, such as developing a workflow site or a sharepoint site perhaps. But in the contexts where it does work well, it works well.<br>For web apps, I personally recommend a combination of unit testing and using something like WATIN for web testing tricky parts of the web UI. I think it's worth the test maintenance cost to be able to run a QA cycle in half the time or less because much of it is automated.</p>
