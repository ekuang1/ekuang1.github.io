id: dsq-747522810
date: 2007-09-24T00:22:27.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <blockquote>The fact that TDD hasnâ€™t been widely adopted proves to me that TDD adds substantially to the time to construct software.</blockquote><p><br>How is that a proof? Depends on what you mean by <em>widely</em> adopted. Is it over 50%? Perhaps not. Is it a significant number? Definitely. Not too hard to find a dev who gets TDD.<br>And I did point out in my post, one would gain plenty of benefits by just starting to introduce automated unit tests and not completely adhering to the TDD dogma.<br>However, having said that, adoption rate is not a proof that TDD adds a significant time or not. There are plenty of experienced TDD devs out there who can develop using TDD not much slower than an equivalent experienced developer can without TDD.<br>I remember working on one particular VB app written to parse Fortran that was incredibly challenging to change without breaking. I had to write tests because every change would introduce some unforeseen bug that I would then spend hours tracking down and then fixing, not to mention the hours in which I didn't even know a bug had been introduced by the fix for another bug. Test coverage would've kept the overall time down.<br>Both teams get 3 months, but both teams have to live with the bugs they introduced in that time.</p>
