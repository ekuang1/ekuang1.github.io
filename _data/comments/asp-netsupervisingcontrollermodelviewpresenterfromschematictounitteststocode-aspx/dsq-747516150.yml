id: dsq-747516150
date: 2006-08-22T22:30:55.0000000-07:00
name: Bas Geertsema
avatar: https://disqus.com/api/users/avatars/Bas Geertsema.jpg
message: "<p>Great post. I have been implementing this pattern myself recently for a project. However I do not work with events in the view interface, but the view will call the controller. These calls contains no parameters; the necessary data (selected tag id, etc) is requested by the presenter by making calls back to the view. I can't say at this point which method works betters, but I felt comfortable with it.<br>As a reply on a previous post: no in this case it is not really worth the effort. However UI's tend to become increasingly complex with little subtle logic flows. One way or another you will probably write the code anyway, so you might as well factor it out in a seperate class. And you get testing possibilities for free.<br>Other techniques I use:<br>- Testing is being done with the use of NMock to stub the interfaces of the view and repositories (dataservice in this case).<br>- For more complex logic flows you can use the State pattern in which you delegate events to a state object that can easy decide what to do based on it's state. (For example: not all events are possible/legitimate in all states).<br>More info about the MVP pattern and state pattern can be found in the excellent book of Robert C. Martin ('Agile Software Development').</p>"
