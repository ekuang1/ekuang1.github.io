id: dsq-747516130
date: 2006-08-09T00:03:47.0000000-07:00
name: Bill Pierce
avatar: https://disqus.com/api/users/avatars/Bill Pierce.jpg
message: <p>Phil,<br>I'm dabbling with MVP/Supervising Controller in ASP.Net as well.  Just some thoughts from my work:<br>+  Rather than use events on the View, I prefer to pass a reference of the Presenter to the View.  This way you have methods on the Presenter like Save(int blogId, string Text) which are called from the View.  I find it easier to inject security and validation checks at the Presenter level when the interaction is structured this way.<br>+ 99% of the properties on my Views are set only.  Any data that needs to come from the View is handled through the Presenter methods (like Save above)<br>+ I don't expose DataBind() on the View.  The setter for Tags in your example would call DataBind itself.  The trade off to this is other initalization properties may need to be set on the View, before you set the Tags.  This further separates the Presenter from the View.<br>+ You mention making the View responsible for determining which blog to edit by grabbing data from the QueryString.  Taking a page from MonoRail you can easily implement an IContext service that wrappes the HttpContext object, giving you access to QueryString parameters, and inject this into your Presenter.  The same tactic can be used for other Web specific objects.  Again, this allows you to make a security check at the presenter level to make sure the user is allowed to view/edit a blog entry.<br>+ I do make judicious use of Page/UserControl events like OnInit, OnPreRender but minimally and only when it doesn't make sense to make the Presenter kick off that code<br>Sorry for the lengthy reply, and again, just my humble thoughts on the subject.<br>-Bill</p>
