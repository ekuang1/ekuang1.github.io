id: dsq-747510396
date: 2007-12-06T12:37:30.0000000-08:00
name: saransony
avatar: https://disqus.com/api/users/avatars/saransony.jpg
message: <p>.NET allows to call System.Windows.Forms.Control functions only from thread where control was created. To run them from other thread we need to use Control.Invoke (synchronous call) or Control.BeginInvoke (asynchronous call) functions. For task like showing database records we need Invoke. To implement this :Delegate type for calling form function, delegate instance and function called using this delegate Invoke call from worker thread. Next problem is to stop worker thread correctly. Steps to do this:Set event "Stop Thread" Wait for event "Thread is stopped" While waiting for event process messages using Application.DoEvents function. This prevents deadlock because worker thread makes Invoke calls which are processed in main thread. Thread function checks in every iteration whether Stop Thread event is set. If event is set, function makes clean-up operations, sets event "Thread is stopped" and returns.<br>try this useful link---<br><a href="http://java.sun.com/j2se/1.4.2/docs/guide/misc/threadPrimitiveDeprecation.html" rel="nofollow noopener" title="http://java.sun.com/j2se/1.4.2/docs/guide/misc/threadPrimitiveDeprecation.html">http://java.sun.com/j2se/1....</a><br>           <a href="http://www.interact-sw.co.uk/iangblog/2004/11/12/cancellation" rel="nofollow noopener" title="http://www.interact-sw.co.uk/iangblog/2004/11/12/cancellation">http://www.interact-sw.co.u...</a><br></p>
