id: dsq-747515564
date: 2006-07-01T02:36:00.0000000-07:00
name: Joe Brinkman
avatar: https://disqus.com/api/users/avatars/Joe Brinkman.jpg
message: <p>Phil,<br>  I tried posting to your earlier blog, but a RSS Reader problem trashed my post so I will try again here.<br>Often when people talk about interface based programming (whether they are talking about interfaces or abstract classes is immaterial) they focus on the syntactic nature of the interface and tend to ignore the semantic nature which is not as well defined.  <br>In your previous blog, you talked about replacing the use of interfaces to define extensibility points and instead use an event based approach.  Unfortunately, this approach only addresses part of benefit provided by interfaces (both Interfaces and abstract classes), and that is that an interface not only defines individual methods, properties and events, it also defines a "group" of these constructs.  <br>Quite often, when building plugin frameworks with an interface, I expect a plugin to provide several properties, methods or events to properly function.  Seldom do I write an interface that is "choose one of the above" from a list of methods.  Often I need the plugin to implement all, or most of the defined interface in order to properly function.<br>With an interface I can group methods and it becomes very clear to the programmer that he is expected to "do something" with each defined portion of the interface.  A developer must take specific action to "do nothing" with a method by at least implementing a stub.  This is enforced by the compiler and aids the developer.<br>With an event based approach, this feature is lost.  Any required dependencies between events is lost or must be recreated by the plugin framework.  In addition, if implemented by the framework, it becomes a runtime check instead of a design-time/compile-time check which is less developer friendly.<br>While I like the event based approach, I think it is wise to tread lightly and not be so quick to dismiss an interface based plugin architecture.  Personally, I think both have their uses and depending on the nature of the extension, one may be a better fit than the other. <br></p>
