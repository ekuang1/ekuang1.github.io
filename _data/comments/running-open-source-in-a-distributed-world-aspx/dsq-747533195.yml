id: dsq-747533195
date: 2010-10-12T10:03:03.0000000-07:00
name: Karl Fogel
avatar: https://disqus.com/api/users/avatars/tpm-7cf0459814c7e3ae3a30bc32b4fd8298.jpg
message: "<p>Hi, Phil -- thanks for your review of the book from before, and for your thoughtful comments now.<br>I can't remember if this is in the print edition or not, but in the online version there's a footnote about this exact issue in the section on committers:<br>  <a href=\"http://producingoss.com/en/committers.html#ftn.id428482\" rel=\"nofollow noopener\" title=\"http://producingoss.com/en/committers.html#ftn.id428482\">producingoss.com/en/committers.html#ftn.id428482</a><br>It's short; I'll just paste it in:<br></p><blockquote>Note that the commit access means something a bit different in decentralized version control systems, where anyone can set up a repository that is linked into the project, and give themselves commit access to that repository. Nevertheless, the concept of commit access still applies: \"commit access\" is shorthand for \"the right to make changes to the code that will ship in the group's next release of the software.\" In centralized version control systems, this means having direct commit access; in decentralized ones, it means having one's changes pulled into the main distribution by default. It is the same idea either way; the mechanics by which it is realized are not terribly important.</blockquote><p><br>Having worked with distributed version control in some projects and centralized version control in others, I can't say I've felt a huge social difference between the two.  Have you?<br>I think the phrase \"commit access\" has become like the word \"patch\": a formerly specific word that has come to stand for the general concept for which the specific thing was once the only example.<br>A \"patch\" used to be a patch file: output from the 'diff' program that could be fed through the 'patch' program to be applied to a base.  But nowadays \"patch\" has come to mean \"a discrete unit of change applied to source code\", possibly including the addition or deletion of files or even directories.<br>Likewise, \"commit access\" now means \"having one's changes accepted into the master copy by default, instead of needing to be explicitly approved each time\".  How this acceptance is obtained is a question of project governance and, ultimately, physical control over the server(s) where the master copy is stored (and of course it requires agreement about which copy <em>is</em> the \"master\", which can be missing in, e.g., hostile fork situations).<br>But my personal experience so far suggests it doesn't have much to do with the version control system the master copy is kept in, nor the version control systems the various developers use (which are usually, but not always, the same as the one used for the master copy -- think git-svn, for example).</p>"
