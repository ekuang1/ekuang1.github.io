id: dsq-747529942
date: 2009-09-02T23:04:00.0000000-07:00
name: Jason Olson
avatar: https://disqus.com/api/users/avatars/Jason Olson.jpg
message: "<p>For those of you who immediately discount the \"jack of all trades, master of none\" argument or that think \"it's just one more keyword, how bad can that be?\", you have to think about it another way. We, as C# developers, are the frog in the pot that's slowly heating up. We don't feel the growing pain. However, if you throw a new frog directly into the water (i.e. a developer who is just learning C#), they are going to be in major pain. <br>It's exactly like the erosion of freedom. Every single step makes sense and seems well thought out. But when you step back and realize what that means for the long-term, is it really worth it? We're losing sight of the forest, after all, it's just another tree! What's the harm?<br>I also don't buy the supermarket argument. While common sense seems to say \"more is better, choice is good\", common sense is wrong. I wish every developer (especially API designers) would read the book \"The Paradox of Choice.\" An over-abundance of choices isn't good, it is often very debilitating and can lead to major confusion. <br>I also wish more C# developers would branch out and learn non-CLR languages, even if they are modern-day irrelevant. Go learn Smalltalk, go learn LISP, go learn Clojure, go learn Scala, go learn Groovy, go learn Ruby, etc. Ruby is currently the \"cool kid\", but there are so many other great languages out there that we can learn a lot from. <br>C# is growing more and more into the modern C++, where long-time C# devs love the language, but it is very difficult for new developers to learn. For those of you who think it is a very simple language to learn (and that dynamic won't add to that baggage), go ahead and try to teach developers C# using .NET 3.5 SP1. Compare the cognitive overhead C# requires to a language like Smalltalk. With Smalltalk, you learn _two_ concepts: Objects, and Messages. Even an \"if\" construct is really a message sent to/from a Boolean object. It's truly elegant and powerful. Have you stopped to look at how many keywords alone C# has in it?<br>So some might argue that Smalltalk isn't a good example because it \"wasn't successful.\" While that is unfortunately true as far as market penetration goes, it wasn't because of the language. I've seen examples of 8-10 year olds writing programs in Smalltalk that I know many C# devs wouldn't be capable of today.<br>Now, I'm not afraid of change. I'm afraid of change for the wrong reasons. I love rocking the boat and not taking things for granted.</p>"
