id: dsq-747532151
date: 2012-03-09T13:09:59.0000000-08:00
name: John Reilly
avatar: https://disqus.com/api/users/avatars/johnny_reilly.jpg
message: "<p>Hi Guys,<br>I happened upon this blog by accident when researching how to get metadata (display names) from an empty list on an object.  The Eric Walch comment got me 99% of the way there.  Thanks Eric!!!<br>I ended up turning it into an HTML extension and thought I'd share it in case anyone else is in the same boat as me.<br>Here's the extension:<br><code><br>    public static MvcHtmlString GetDisplayNameForPropertyOfList&lt;TModel, TProperty&gt;(<br>        this HtmlHelper&lt;TModel&gt; htmlHelper,<br>        Expression&lt;Func&lt;TModel, TProperty&gt;&gt; expression,<br>        string propertyName<br>    )<br>    {<br>      //Get the current list from the expression<br>      var currentList = expression.Compile().Invoke(htmlHelper.ViewData.Model);<br>      //Determine list type<br>      var listType = currentList.GetType().GetProperties()[2].PropertyType;<br>      //Get metadata for list type<br>      var typeTMetaData = ModelMetadataProviders.Current.GetMetadataForType(null, listType);<br>      //Get the relevant property using the supplied propertyName<br>      var property = typeTMetaData.Properties.Where(x =&gt; x.PropertyName == propertyName).SingleOrDefault();<br>      string value = (property == null) ? propertyName : property.DisplayName;<br>      return MvcHtmlString.Create(value);<br>    }<br></code><br>And it can be used in views as follows:<br><code><br>@Html.GetDisplayNameForPropertyOfList(vm =&gt; vm.MyList, \"ListPropertyName\")<br></code><br></p>"
