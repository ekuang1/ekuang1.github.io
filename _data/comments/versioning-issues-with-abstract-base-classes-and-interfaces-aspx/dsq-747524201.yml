id: dsq-747524201
date: 2008-02-20T18:54:28.0000000-08:00
name: Chad Myers
avatar: https://disqus.com/api/users/avatars/Chad Myers.jpg
message: <p>Converting HttpContext to either IHttpContext or HttpContextBase doesn't solve much. If you're going to do that, then just use HttpContextBase, but for the love of God, please make everything public virtual and have an empty constructor (or at least a public one that we can fully satisfy).<br>HttpContext is a huge separation of responsibilities principle violator... it has error handling, profile binding, HTTP stuff (request/response), session, etc. <br>HttpContext is both a hub class (static service locater essentially) and a main functionality class. This is not good.<br>That's why you're so afraid to go with an interface. Solve that problem and this wouldn't be that big of a deal.<br>Separate the AddError/GetError stuff out. Separate the HTTP stuff out (request/response), separate the session stuff out.<br>We were howling for IHttpContext because it was the best we hoped to get, but now that you guys are talking honestly and openly about re-architecting some of this (AWESOME!) let's have a full-on architecture discussion.<br>Have you considered using DI and IoC (Unity?) to compose the current request context situation?  Why not allow us to change and compose how the request context looks so that we can avoid some of these versioning issues altogether?<br>You can keep adding functionality in the form of new interfaces and ABS' without breaking existing functionality.  The HttpRequest interface hasn't changed much since ASP 3.0, really. Same for HttpResponse, same for SessionState, etc.  <br>What I'm sure you're really concerned about is when something new like Profile or Membership comes along, how do you do that without breaking all those custom IHttpContext impls, right?  Well, think about what I said above and it wouldn't matter in the first place.<br></p>
