id: dsq-747524221
date: 2008-02-20T22:35:04.0000000-08:00
name: Evan
avatar: https://disqus.com/api/users/avatars/Evan.jpg
message: <p>"One thing I’d love to hear more feedback from others is why, in .NET land, are we so tied to interfaces? If the general rule of thumb is to keep interfaces small (I’ve even heard some suggest interfaces should only have one method), why aren’t we using delegates more instead of interfaces? That would provide for even looser coupling than interfaces"<br>Because much of what's happening on the .NET side (design-wise) is catch-up to Javaland and 20 year old techniques from C++.  Unless it's changed recently (I'm not a java guy), they don't even have delegates in Java.  If you look at the big picture, you will see where their design material has bled into and influenced the .NET world.  <br>Wiring with delegates and wiring with interfaces require different tooling and different thought processes.  Given the resistance of people to adapt to building with interfaces (the easiest to grasp), I hold out little hope for the community to fully leverage an event-driven solution like what you would have with delegate wiring.  At least not for several years anyway.  It's a greater paradigm shift than classic interface-based design school of thought.<br>It's not unheard of though.  I can recommend the following book:<br><a href="http://www.amazon.com/Event-Based-Programming-Taking-Events-Limit/dp/1590596439/" rel="nofollow noopener" title="http://www.amazon.com/Event-Based-Programming-Taking-Events-Limit/dp/1590596439/">http://www.amazon.com/Event...</a><br>HTH,<br>Evan</p>
