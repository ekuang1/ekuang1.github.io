id: dsq-747524212
date: 2008-02-20T21:35:37.0000000-08:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: "<p>@Chadmyers I agree, HttpContext is a bit of a mess. If we had to start from scratch, I'd do it differently. Keep in mind, we're not changing the core HttpContext class. The best we can do is wrap it? Now theoretically we could wrap it with a set of classes that then compose together to provide the set of functionality that HttpContext does, but that's a bit of a nightmare as well.<br>Instead, we've chosen to wrap the \"real\" HttpContext with an HttpContextWrapper that implements HttpContextBase. HttpContextBase, for all intents and purposes, is an interface because it doesn't contain any implementation. At this point it is pure contract, so it meets the goal you mentioned... <br></p><blockquote><br>We're tied to interfaces because the whole original point of interfaces: To define a simple contract of interaction, but allow wildly differing implementations of that contract.<br></blockquote><p><br>HttpContextBase allows for that. Of course, it has the limitation that you can't inherit from it and another class because it's really an ABC. Like I said, no perfect design.<br>As for whether HttpContext changes, I can't remember if it's HttpContext or HttpRequest, but I know there are upcoming changes in ASP.NET 3.5 SP1 to one of the intrinsic classes. That's what raised this issue because MVC needs to work without taking that dependency.</p>"
