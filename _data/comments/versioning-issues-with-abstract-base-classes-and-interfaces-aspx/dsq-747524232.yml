id: dsq-747524232
date: 2008-02-21T23:48:28.0000000-08:00
name: krzysztof Cwalina
avatar: https://disqus.com/api/users/avatars/krzysztof Cwalina.jpg
message: <p>Hi to all,<br>Since I am responsible for the guideline (interfaces vs. ABC) and it’s a really interesting and passionate discussion, I thought I would provide some of my thoughts on this.<br> “Who doesn't expect to have to recompile their application with a new version of the .Net Framework? The whole premise of that argument seems ridiculous to me.”<br>“Why do you have to insist that 10 years old app that was originally developed for .NET 1.0 needs to be able to run on .NET 4.0 with no changes?”<br>Many of our customers don’t want to recompile when they move to a new Framework version. Many would not have a problem with having to recompile. Both groups have valid reasons for their preferences, but we can only serve them all by not requiring recompiling. BTW, the first group does not want to recompile because for example they write client apps that are harder to redeploy, don’t want to spend resources on porting, use third party libraries (which would need to be recompiled), lost their source code, and many other reasons.<br>“That remark from the Framework Design Guidelines is bunkum. We experience pain because you don't ship interfaces. You may not, but we do.”<br>I think you experience pain because we don’t have the right extensibility points in the Framework, not because we don’t ship interfaces. One way to address the problem is for the community to give us feedback on which parts of the Framework are not extensible enough. We are super interested and will seriously look into these suggestions. I really strongly feel that shipping more interface-heavy APIs won’t help and will actually backfire. You can use interfaces all over the place and still have a system that is not extensible. Extensibility needs to be designed. It cannot be created automatically by replacing “class” with “interface”.<br>“Sure, abstract class would help but only if all public methods/properties were virtual. Are you going to do this?”<br>Yes, Exactly! It’s all about extensibility points design, not about whether it’s a class or an interface. We will not blindly make all members virtual, but we will those that the community needs for extensibility (and we can still design to be safely extensible).<br>“It would seem the design advice about interface vs. abc is really only applicable if the interface is meant to be implemented by an end user.”<br>I participated in many meeting where we considered a breaking change, decided that the risk of brakes in customers’ code is close to nil, made the change, and then had to revert it in Beta because it was after all breaking many apps. This is the nature of a very large frameworks used by millions of applications. If a change breaks just 0.1% of applications, it still breaks 1000 apps and it costs the customers headaches and money to fix them.<br>Don’t get me wrong, we realize that we need to be able to evolve/cleanup the Framework and we are working on technologies that would allow us to do this without breaking customers’ code. For example, moving types across assemblies used to be breaking. Now, with type forwarders, it’s not. We are considering more technologies like that in the future.<br>“An interface is a promise; new features should really be a *new promise* and thus behind a new interface. […] What am I missing here?”<br>I will try to write a separate post about this at some point, but it’s going to take some time. The best I have now is a video of a presentation where I talk about it. The whole presentation is very long. The part about interfaces starts at 2:54.40. The presentation is at <a href="http://www.researchchannel.org/prog/displayevent.aspx?rID=11087&amp;fID=2740" rel="nofollow noopener" title="http://www.researchchannel.org/prog/displayevent.aspx?rID=11087&amp;fID=2740">http://www.researchchannel....</a><br>... that's the longest comment I ever wrote on a blog :-)</p>
