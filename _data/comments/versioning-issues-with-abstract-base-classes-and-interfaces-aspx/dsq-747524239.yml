id: dsq-747524239
date: 2008-02-22T18:07:39.0000000-08:00
name: Chad Myers
avatar: https://disqus.com/api/users/avatars/Chad Myers.jpg
message: <p>I've been thinking a lot on this and trying to come up with a silver bullet and I think as long as the goal is to keep HttpContext somewhat similar to what it is today there is no way out of this pit.<br>Leave HttpContext alone and break up everything behind it. Compose HttpContext from all the behind-pieces to preserve WebForms compatability, but for MVC and going forward, have smaller components with interfaces and ABCs that address simple concerns and aren't likely to change much.  Provide default compositions of these things using something like IoC or a simple composition wrapper, but allow someone doing alternate impl. or unit testing to pass in mocks of IHttpResponse, IHttpRequest, etc.<br>Print big warnings that, for production implementations (i.e. not unit tests), if you derive from the interface, there likely WILL BE breaking changes. You are STRONGLY ADVISED to derive from the abstract base classes (HttpResponseBase, HttpSessionStateBase, etc) if you wish to extend anything. YOU HAVE BEEN WARNED.<br>80% of the people will not do either and use everything stock. 19% will use the interfaces for mock testing and won't be too upset if the interface changes in the next update or SP.  1% will actually use an alternative implementation of the interfaces, and will likely be able to handle the complexities (i.e. 'Hot Coffee').</p>
