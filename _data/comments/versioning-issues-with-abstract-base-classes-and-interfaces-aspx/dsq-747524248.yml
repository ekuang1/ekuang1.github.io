id: dsq-747524248
date: 2010-11-15T22:17:13.0000000-08:00
name: SMM
avatar: https://disqus.com/api/users/avatars/SMM.jpg
message: "<p>Let's look at the possible scenarios and why MS chose the wrong one.<br>1) You use the built-in types and don't make any of your own.<br>PROS/CONS: This is completely equivalent for interfaces and abstract base classes. Doesn't affect the client. Strongly typed versioning will affect both CLR Types the equally.<br>2) You want to make your own type and the framework only refers to the abstract base class.<br>PROS: They can add to it in future versions and it won't force you to change your implementation.<br>CONS: You are forced to inherit from their base and conform all of your types to their framework (my standard MS gripe). Also you will get no notice that anything has changed which they deem a good thing but you might start getting NotImplementedExceptions that you never had before. Now you have to change your stuff anyway but you don't find out until runtime! Their design becomes built and tested with the expectations of using this standard implementation (e.g. with all of HttpContext's standard quirks and dependencies).<br>3) You want to make your own and the framework only refers to the interface.<br>PROS: You have ultimate flexibility to implement using whatever composure you want. **You can create mock objects with ease.** You can provide implementations that have no concept of ASP.NET. What they are stating as the primary con is also your pro: if you want to know if anything changed in the interface, then you will get compile-time confirmation that you have the complete implementation.<br>CONS: If they add to the interface you have to add to your implementation.<br>4) You want to make your own and the framework only refers to the interface but it provides a *public* abstract base class.<br>PROS: all of the pros of them using an interface, and optionally all of the pros of them using the abstract base class.<br>CONS: None. All you have to do is pick which one to inherit from to get the desired effect.</p>"
