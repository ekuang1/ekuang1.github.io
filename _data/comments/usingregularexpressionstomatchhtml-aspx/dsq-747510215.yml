id: dsq-747510215
date: 2007-10-15T12:11:20.0000000-07:00
name: Jesse Morrow
avatar: https://disqus.com/api/users/avatars/Jesse Morrow.jpg
message: <p>I allow the user to submit customized header and footer HTML through a web form. While I'm not too concerned with what they do with the HTML or even if it contains valid tags it is important that their tags be well formed and balanced (i.e. properly matched with ending tags) so that their potentially bad HTML doesn't cause the rest of the web site to get trampled.<br>I made a Javascript function which takes an HTML snippet as a string and returns true if the HTML is well formed and all tags are properly balanced.<br>I took the regular expression given here and extended it to match:<br>1) any opening tag, its *text* content, and its corresponding closing tag,<br>2) any self-closing tag - such as &lt;br /&gt;, &lt;input /&gt;,<br>3) any HTML comments, or<br>4) pure text (i.e. no HTML tags)<br>The trick is taking into account the nested nature of HTML which regular expressions aren't expressive enough to match. My trick is to iteratively replace each matched portion with nothing - thus stripping it from the HTML string until it has been stripped down to an empty string. If the loop can strip the HTML iteratively to an empty string then it must be valid and all tags balanced. If the loop hits a point where nothing new is being matched and stripped and yet the string is still not empty then the HTML is invalid or unbalanced.<br>The reason this works is because each loop iteration strips off all the most deeply nested elements which have no child elements (leaf elements) thus leaving their parent elements as leaf elements for the next iteration.<br>Here is the code:<br>var regex = /[^&lt;&gt;]*&lt;(\w+)(?:(?:\s+\w+(?:\s*=\s*(?:".*?"|'.*?'|[^'"&gt;\s]+))?)+\s*|\s*)&gt;[^&lt;&gt;]*&lt;\/\1+\s*&gt;[^&lt;&gt;]*|[^&lt;&gt;]*&lt;\w+(?:(?:\s+\w+(?:\s*=\s*(?:".*?"|'.*?'|[^'"&gt;\s]+))?)+\s*|\s*)\/&gt;[^&lt;&gt;]*|&lt;!--.*?--&gt;|^[^&lt;&gt;]+$/ig;<br>function validate(html) {<br>   var v = html;<br>   do {<br>      html = v;<br>      v = html.replace(regex, '');<br>   } while( v != html)<br>   return v.length==0;<br>}<br>The loop structure and iterative concept is totally stable. The only thing which might need some refinement is the regular expression as I haven't thought too deeply about all the comment and line return possibilities.<br>Jesse</p>
