id: dsq-747519832
date: 2007-05-20T22:52:51.0000000-07:00
name: Rob Cecil
avatar: https://disqus.com/api/users/avatars/Rob Cecil.jpg
message: <p>One more change, Phil. This time allowing for the case where the resource might be organized into subfolders in the assembly. The .net assembly as you know converts subfolders into dots, so 'Results\test_results.xml' becomes '&lt;typename&gt;.results.testresults.xml'. Here is the Execute() method again, with changes:<br><br>[System.Diagnostics.DebuggerNonUserCodeAttribute]<br>      public override object Execute( object o, IList args )<br>      {<br>        Assembly assembly = attribute.Type.Assembly;<br>        string resourceName = assembly.GetName( ).Name + "." + attribute.ResourceName.Replace( '/', '.' );<br>        if ( !new List&lt;string&gt;( assembly.GetManifestResourceNames( ) ).Contains( resourceName ) )<br>        {<br>          throw new Exception( String.Format( "Unable to find embedded resource '{0}' in assembly '{1}'.", <br>                  attribute.ResourceName, assembly.FullName ) );<br>        }<br>        using ( Stream stream = assembly.GetManifestResourceStream( resourceName ) )<br>        {<br>          <br>          try<br>          {<br>            if ( String.IsNullOrEmpty( attribute.Destination ) )<br>            {<br>              <a href="http://ExtractResourceAttribute.stream" rel="nofollow noopener" title="ExtractResourceAttribute.stream">ExtractResourceAttribute.st...</a> = stream;<br>              return this.Invoker.Execute( o, args );<br>            }<br>            else<br>            {<br>              WriteResourceToFile( stream );<br>            }<br>          }<br>          catch ( TargetInvocationException tie )<br>          {<br>            if ( tie.InnerException != null )<br>            {<br>              throw new Exception( tie.InnerException.Message, tie.InnerException );<br>            }<br>            throw;<br>          }<br>        }<br>        try<br>        {<br>          return this.Invoker.Execute( o, args );<br>        }<br>        catch ( TargetInvocationException tie )<br>        {<br>          if ( tie.InnerException != null )<br>          {<br>            throw new Exception( tie.InnerException.Message, tie.InnerException );<br>          }<br>          throw;<br>        }<br>        finally<br>        {<br>          if ( attribute.ResourceCleanup == ResourceCleanup.DeleteAfterTest )<br>            File.Delete( attribute.Destination );<br>        }<br>      }<br></p>
