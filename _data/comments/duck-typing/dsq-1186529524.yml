id: dsq-1186529524
date: 2014-01-04T03:47:55.0000000-08:00
name: Joshua Smeaton
avatar: https://disqus.com/api/users/avatars/joshuasmeaton.jpg
message: "<p>I think Eric assumed that duck typing meant that the argument passed to a function had to resemble a specific type. As pointed out though, that is structural typing. A relevant python function that uses duck typing might look like this:</p><p></p><pre>def func(arg):<br>    if hasattr(arg, 'quack'):<br>        arg.quack()<br>    elif hasattr(arg, 'woof'):<br>        arg.woof()<br></pre><p></p><p>The type of the argument is totally irrelevant to the receiving function. The attributes the argument has are only relevant in the body of the method where they are used.</p><p>Of course, with such a basic example, someone is likely to suggest an inheritance tree with a common \"talk\" method. I've been hacking on django lately, and duck typing is used right throughout the project. For example, a column in a query may be represented as a string, or as an object capable of generating the appropriate string.</p><p></p><pre>def parse_column(col):<br>    if hasattr(col, 'as_sql'):<br>        return col.as_sql()<br>    return col<br></pre><p></p><p>And now any user defined column only needs to provide an as_sql() method, and it can play along with the rest of the framework.</p><p>Minor nitpick: my python brain is hurting due to the misaligned blocks in your try-catch example. Other than that, you're remarkably close to actual python!</p>"
