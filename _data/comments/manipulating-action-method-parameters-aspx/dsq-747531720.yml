id: dsq-747531720
date: 2010-02-22T10:59:25.0000000-08:00
name: Cymen
avatar: https://disqus.com/api/users/avatars/Cymen.jpg
message: <p>If there are a relatively few number of pages (say under a couple hundred), is there anything wrong with publishing a route for each direct page with the "object default" holding the numeric identifiers that correspond with the slug (and other helpful slug-specific data)? That is the approach I've tried and it seems to work well and avoids having to do any kind of lookup during runtime.<br>So I do something like this:<br><code><br>routes.MapRoute(<br> "Database.Home.1",<br> "Home",<br> new {<br>  controller  = "Database",<br>  action      = "Load",<br>  sectionID   = 1,<br>  sectionName = "Home",<br>  routeName   = "Home",<br>  routeID     = 1,<br>  pageID      = 1<br> }<br>);<br>routes.MapRoute(<br> "Database.Contact.2",<br> "Home/Contact",<br> new {<br>  controller  = "Database",<br>  action      = "Load",<br>  sectionID   = 1,<br>  sectionName = "Home",<br>  routeName   = "Home/Contact",<br>  routeID     = 2,<br>  pageID      = 2<br> }<br>);<br></code><br>Of course, this is populated from database values in a loop so the above is just an example. The feature I particularly like is using "object defaults" to store the mappings. I did wonder if there were any performance issues with stuffing the routing table with hundreds of URLs (although the small project I'm doing this on ~50).<br>My thought is that this is a reasonable approach for non-category URLs (for category URLs, lean towards using numeric identifiers embedded in the URL).</p>
