id: dsq-747525920
date: 2008-08-13T04:07:53.0000000-07:00
name: Matt Holmes
avatar: https://disqus.com/api/users/avatars/Matt Holmes.jpg
message: <p>I agree with David Nelson. I design my software for stability, usability, maintainability and extensibility first. I worry about things like testability later. I guess my biggest problem with a lot of these new movements that come around, is that they sound great on paper, and work in an academic setting, then you put them in the hands of the grunts in the trenches like me, and they fall apart. Those of us who develop with deadlines and dollars on the line, aren't likely to re-envision the way we design software so that a few unit tests can be easily created. I would much rather mold my unit tests around my well designed software, than mold my software around a bunch of unit tests. My customers don't see unit tests, they see software. Other developers that get hired on don't care how my unit tests are structured, they care how the meat of my code is structured and designed. If I were to go to my boss and say "Well boss, our code design probably isn't optimal, but darn tootin' if it doesn't test well", I'd probably get fired.<br>I also think that using integrated circuits as an analogy is sort of silly. Integrated circuits would be nigh impossible to test without facilities, they are integrated circuits. I can test my software without ever putting a single piece of test rigging inside of it. That's not to say I don't value unit tests, but I think look at the microprocessor designers and going "well, they design hardware XYZ way, we should design software XYZ way" is not the most productive leap to make.</p>
