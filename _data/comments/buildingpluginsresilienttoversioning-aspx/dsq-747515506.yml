id: dsq-747515506
date: 2006-07-02T00:39:00.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>Craig, interesting point on the "chains of interceptors" vs "groups of listeners". I think I was getting at the same thing when I said this in the comments to part 2:<br></p><blockquote><br>I think this (event-based approach) works especially well when a plugin extends functionality and may be less suited for when it replaces functionality.<br></blockquote><p><br>So by "chains of interceptors" are you referring to plugins that replace behavior?<br>Right now I'm thinking through the problem of redundancy.<br>For example, in some situations an application wants a plugin to replace behavior but only one.  This constraint can't be modeled by an interface or by an event based approach.  It is purely application logic, so it seems that either approach would work.<br>However, from the application's perspective, the interface (or abstract base class) approach is more natural.<br>When I call a method on a plugin, I only expect one plugin to execute the method.  When I raise an event, I might expect one or more plugins to execute in response.<br>So when multiple plugins are loaded that implement the same plugin, how have you handled it?  Do you have instances in your framework that require multiple listeners?  In that situation did you just cycle through plugins?</p>
