id: dsq-747515501
date: 2006-06-27T17:38:00.0000000-07:00
name: Craig
avatar: https://disqus.com/api/users/avatars/Craig.jpg
message: "<p>Phil: there are two situations. One is that a new operation has a reasonable default implementation. The other is that it does not. If a reasonable default implementation exists, then abstract bases are an obvious good choice. If it doesn't, then they're nearly equivalent to interfaces - the one caveat being that you \"use up\" your one base class. <br>So most of the time they're better. Sometimes they're no better. Occasionally they're worse. <br>As you point out, the event mechanism is a good one when the number of events is fairly small *and* when you don't want to provide a default implementation *and* when you don't care if more than one person hooks up. This will often but not always be the case. <br>At the end of the day I think we largely agree that the best approach is a function of the requirements. My only difference with you (I think) is that I'm finding that abstract bases are a good choice more often than I used to think. <br>(BTW, typing long comments like this one is painful with your preview thingy - I can type fast enough to get ahead of it. It must be rerendering the entire comment on every keystroke.)</p>"
