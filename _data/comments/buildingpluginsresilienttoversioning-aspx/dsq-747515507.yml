id: dsq-747515507
date: 2006-07-02T21:43:00.0000000-07:00
name: Craig
avatar: https://disqus.com/api/users/avatars/Craig.jpg
message: <p>Yes - for the applications I've written, I've tended to leverage more of a "provider" model than a "plugin" model. That is, my code actually wanted to *modify* the result of a method call (or series of method call) rather than simply know that something happened. Events are a good solution when you just want to know "Hey, the application just did X". <br>I think events can still work when minor modifications to a particular result are required. E.g. give everyone a chance to cancel an event (think BeforeXxx/CancelEventArgs). But the very nature of events  (multicast) means that it's harder to model complex return types. <br>As for systems I've worked with, the best example is probably FlexWiki. There I have an abstract base called ContentProviderBase. A chain of objects implementing the abstract base exist. Each one has a reference to the next (except the last). The last one does things like store the content in a database, a filesystem, or whatever. Intermediate ones modify the results, doing things like providing security, caching, or synthesizing topics that aren't stored anywhere.</p>
