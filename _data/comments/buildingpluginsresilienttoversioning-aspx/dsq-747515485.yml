id: dsq-747515485
date: 2006-06-26T19:15:00.0000000-07:00
name: Craig
avatar: https://disqus.com/api/users/avatars/Craig.jpg
message: "<p>Of course, using an abstract base instead of an interface solves the \"Adding a method breaks the client\" problem neatly by giving you a way to default in a new implementation. If no default applies, then perhaps plugins with the old interface *should* break. Or we can fall back on the old COM approach of defining a new interface which extends the old, and requiring the client of the plugin to figure out how to handle old plugins (this approach also works with abstract bases). <br>My COM background has made me tend towards interface-based approaches in the past, but I've been experimenting with abstract bases instead, and I have to say I've been pleased with the results. The biggest complaint I had \"But you only get one base class!\" seems to fall by the wayside in 99% of the cases, as the plugin is happy to accept whatever constraints on its heritage I care to apply: it simply doesn't care. <br>Of course, one can also mix abstract bases and interfaces, but I've found that this approach generally requires enough cognitive overhead as not to be worth it.</p>"
