id: dsq-1118091267
replyToId: dsq-1118063385
date: 2013-11-11T07:04:51.0000000-08:00
name: Alanna Muir
avatar: https://disqus.com/api/users/avatars/alannamuir.jpg
message: <p>Because I believe the paradigm of code refactoring is born from the problem of coders always wanting to code from scratch. We presume that writing code from foundation is going to be more optimized than the "black boxes" which we cannot control. In the era of intermediate code and JIT compilation, this is seldom the case, and more often than not, the higher level abstractions can perform better than had we written new code from scratch.</p><p>That's not to say that it's not also more manageable code. It's always going to be easier to target .Net framework functions than reinvent the wheel and have thousands of lines of my own implementation that does more or less the same thing, slower.</p><p>In a nutshell, the lesson should be that knowing the keywords and syntax for a language is not as important as having a concrete understanding of the framework you have at your dispense. Gone are the days of the dangerous and slow (strlen anyone?) C Standard Library, and if you're writing everything from scratch, you're not a very efficient programmer.</p><p>Now, I spend half my time in embedded C world, where the opposite is true. Compilers are sometimes an afterthought of microcontroller vendors and seldom do I see the level of optimization that exists in the x86 world. Nor is there any intermediate level, I'm writing what amounts to a small abstraction from assembly language, so code is likely as, if not more performant that the more generic code available in the standard libraries. So these ideas aren't universal, and I disagree with them being taught in Universities as a tautology.</p>
