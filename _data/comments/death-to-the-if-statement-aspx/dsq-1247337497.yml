id: dsq-1247337497
date: 2014-02-16T16:06:17.0000000-08:00
name: RubyPanther
avatar: https://disqus.com/api/users/avatars/RubyPanther.jpg
message: "<p>As far as the Ruby goes, without the if there is no reason to even have 2 methods.</p><p>The if is just an optimization, to avoid doing extra work if you don't need to. Seems sensible to optimize the things you know are wasteful.<br><code></code></p><pre><code>def padded_take ary, n<br>  ary =  n &lt;= ary.length ? ary : ary + [0]*(n-ary.length)<br>  ary.take n<br>end<br></code></pre><p><br>or with a postfix if:<br><code></code></p><pre><code>def padded_take ary, n<br>  ary += [0]*(n-ary.length) if n &gt; ary.length<br>  ary.take n<br>end<br></code></pre><p></p><p>I think this is the clearest and lowest maintenance of all though.</p><p>The #max in the example is clearly bad. Intentionally reducing performance to... de-optimize out a hated keyword. If you really want the extra method, just extract the ternary into a method. But if you think about whatever code you'd be calling it from, if the pad is safe you can just say pad(ary,n).take(n) Ideally these would be instance methods and you'd really have something like foo.pad(n).take(n) and I don't see why you'd prefer foo.padded_take(n)<br><code></code></p><pre><code>def pad ary, n<br>  n &lt;= ary.length ? ary : ary + [0]*(n-ary.length)<br>end<br>def padded_take ary,n<br>  pad(ary,n).take(n) # just call this from the caller :)<br>end<br></code></pre><p><br>(edited for code blocks)<br></p>"
