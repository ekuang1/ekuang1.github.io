id: dsq-1118825259
date: 2013-11-11T17:01:30.0000000-08:00
name: richardjking2000
avatar: https://disqus.com/api/users/avatars/richardjking2000.jpg
message: <p>There is a dark side to this that is hidden because of the simplicity of the example, but becomes very much a difficult thing to get past in code written for significantly sized systems.</p><p>By creating two different 'routines' to make up for the lack of if (or switch or whatever), you create no requirement for the code to reside anywhere near each other.  And when that isn't a requirement, you'll get code spread all over the place (I know.. 30 years now in the software industry).</p><p>There is such a thing as over-decomposition of a problem.  When you are new to a codebase and trying to understand it though reading 60 odd 3 line functions, it can be very difficult indeed to understand the big picture.</p><p>Its not about pesky if statements, or static vs. dynamic typing, or any other fancy buzzwords of the moment.  Its about writing code that is both easy to understand and easy to maintain.  And that means making decisions about what code should be in ONE place, and what code should be separated.  And those decisions aren't reducible to 'lets reduce if statements', 'lets ban switches', or any other of a plethora of types types of inanities I've seen over the years.</p><p>I for one am tired of the nonsensicle formulations that bear no resemblance to the real issues facing software development.</p><p>Death to Idiocy (c), power to common sense!</p>
