id: dsq-3597534929
replyToId: dsq-3597437619
date: 2017-11-02T16:31:55.0000000-07:00
name: Douglas Pagani
avatar: https://disqus.com/api/users/avatars/douglaspagani.jpg
message: "<p>Nothing, functionally. But if you're writing a blog-post for the purpose of sharing information &amp; helping people to improve their workflows, quite a bit : )</p><p>xargs can be weird for people unfamiliar with it; it has a strange, let alone platform-inconsistent, invocation-pattern. -I{} is the cleanest way to show what xargs is doing under the head, since one can \"see\" where it will get substituted, implied by the last {}, and then more-quickly understand \"oh, it's running that command by passing in its input as arguments.\"</p><p>-I{} is also the most likely first-extension you'd make beyond xargs' basic capability. You can insert args wherever you please by just shifting {}, and as well, you can \"swallow\" the input, yet run the command still. (There are a couple cases where I've wanted to do this)</p><p>-r is pretty terrible, though. You're basically placing a try-catch in for other people who don't know it's there, and swallowing perhaps-valid errors. Wouldn't you want to know if you invoked bclean, yet there were no merged-branches?</p><p>By default, xargs, without -I{} will just put args after -d. But -I{} allows you to place it anywhere.</p><p>And actually, there is one functional difference that I'm 99% aware of. xargs -I{} will actually run 3 instances of the command, one \"line\" per argument. Without it, it will just dump all args after git branch -d. However, for git branch -d this is completely irrelevant, since multiple invocations of itself with single-args, and a single invocation with multiple-args, work the same. But for other commands, this might not be the case.</p><p>Again, I'd argue for -I{} promoting a more clear understanding of a very murky, yet very powerful, utility.</p><p>PS: tested, yes that is the case. BUT, only if the inputs are one-per-line. <br>So:<br>echo '<br>one<br>two<br>three ' | xargs -I{} echo x. {}<br>VS.<br>echo one two three | xargs -I{} echo x {}</p><p>Whether or not \"words\" of input that xargs received are on lines DOESNT matter for xargs echo x. (both produce x. one two three), but for xargs -I{}, new \"echo\"s will be run for each line. That's because for -I, -L1 is implied.</p><p>Again, getting into the bones of it, but the takeaway is that -I{} provides clarity in an area where it is much-needed.</p>"
