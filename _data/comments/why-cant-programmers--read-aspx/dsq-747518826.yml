id: dsq-747518826
date: 2011-06-02T07:36:50.0000000-07:00
name: Joey
avatar: https://disqus.com/api/users/avatars/Joey.jpg
message: "<p>Here's the solution in Ada.<br>I could have \"gone all out\" and done a proper spec/body pair; but I think this shows that Ada is quite capable of meeting its design-goal of readability/maintainability. (I am sorry if the word wrapping mangles the comments a bit.)<br><code><br>With Ada.Text_IO;<br>Use Ada.Text_IO;<br>Procedure Test is<br>-- THE SPECIFICATION:<br>--   Write a program that prints the numbers from 1 to 100. <br>--     But for multiples of three print \"Fizz\" instead of the number<br>--     and for the multiples of five print \"Buzz\".<br>--     For numbers which are multiples of both three and five print \"FizzBuzz\".<br>-- NOTE: I am assuming that cases are mutually-exclusive; that is<br>-- that when a number is a multiple of 3 and 5 that it does NOT<br>-- print Fizz and then FizzBuzz.<br>   Procedure Fizz_Buzz( Input_Number: In Integer;-- The input<br>                        Fizz_Number : In Integer:= 3;-- The number for \"Fizz\"<br>                        Buzz_Number : In Integer:= 5-- The number for \"Buzz\"<br>                      ) is<br>      -- Here is where we get the values we need to implement the procedure;<br>      -- namely, two booleans which are True when their number evenly divides<br>      -- the Input_Number.<br>      Fizz : Constant Boolean := 0 = Input_Number Mod Fizz_Number;<br>      Buzz : Constant Boolean := 0 = Input_Number Mod Buzz_Number;<br>   begin<br>      if Fizz And Buzz then<br>         -- For inputs where both are evely divisable we print \"FizzBuzz.\"<br>         Put_Line( \"FizzBuzz\" );<br>      elsif Fizz then<br>         -- For inputs whice are only divisable by the \"Fizz-number\" we print \"Fizz.\"<br>         Put_Line( \"Fizz\" );<br>      elsif Buzz then<br>         -- Likewise for inputs only divisable by the \"Buzz-number.\"<br>         Put_Line( \"Buzz\" );<br>      else<br>         -- If neither number divides the input, then we print the number itself.<br>         Put_Line( Integer'Image(Input_Number) );<br>      end if;<br>   end Fizz_Buzz;<br>Begin<br>   -- Specs say to operate on all the numbers from 1 to 100.<br>   For Index in Positive Range 1..100 Loop<br>      Fizz_Buzz( Input_Number =&gt; Index );<br>   End Loop;<br>End Test;<br></code></p>"
