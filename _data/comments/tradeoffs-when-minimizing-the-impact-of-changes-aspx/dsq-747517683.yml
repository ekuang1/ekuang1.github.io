id: dsq-747517683
date: 2006-11-19T04:09:53.0000000-08:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>Thanks Rick, I think I see the disconnect better.  Actually, .TEXT and consequently Subtext, does separate data access from the business object layer.  It does so via a the provider model.  In .TEXT, there were to levels of abstractions, the ObjectProvider and the DataProvider.  The DataProvider returned IDataReaders and the ObjectProvider returned fully hydrated objects.  Thus the client app (the blog engine), only has to deal with the ObjectProvider, never knowing how the underlying data is stored.<br>For Subtext, multiple backends will matter.  At some point, we will want to support SQL Compact which doesn't support stored procs.  <br>So at that point, we can either choose to have 2 providers, one for Sql 2000/2005 which can still use stored procs and one for Sql Compact, or we can simply stop using stored procs altogether, which works for both database engines.<br>My point in this whole article is if we take the second approach, and focus on using a dynamic query engine, I don't have to add providers for every new database engine we wish to support, I get MySql support for free, assuming the dynamic query engine (such as NHibernate) supports that db.</p>
