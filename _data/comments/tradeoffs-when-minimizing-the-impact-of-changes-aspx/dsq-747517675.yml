id: dsq-747517675
date: 2006-11-16T08:05:25.0000000-08:00
name: Rick Strahl
avatar: https://disqus.com/api/users/avatars/Rick Strahl.jpg
message: <p>Phil, I think we're talking about different things here. <br>The way I see database abstraction, that happens much lower down the stack. In my app framework I have a data layer that has versions for several different database servers (Sql, VistaDb, Oracle, MySql, FoxPro and generic OleDb) and these co-exist without any changes ever being made from the application layer. <br>Application specific code - business logic etc., which is where a changed field has an effect is higher up the chain at the business object/entity level. And there you do have to map between the database and the fields exposed either manually or via code generation. But that should have zero effect on the data access layer.<br>I know .Text doesn't quite go that route &lt;g&gt; - it has a DAL that also is a business layer and if you do that then this sort of database abstraction is out the window.<br>Abstraction where you have separate data and business layers may still require database specific bracketing at times, although I find that it's rare. In most of my applications I can switch between any of the data providers without any code changes, provided the database structures are compatible (which is usually the biggest pain).<br>Reality is that this is overrated though. I have two products that are vertical and I get 2 or 3 requests a year for running on anything but SQL Server and most of the time even these requests are not really pressing &lt;s&gt;...<br>I doubt there's a real serious need to run an ASP.NET based Blogging application on Oracle &lt;g&gt;...<br></p>
