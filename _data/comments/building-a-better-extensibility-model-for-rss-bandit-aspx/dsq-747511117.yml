id: dsq-747511117
date: 2005-03-04T04:54:00.0000000-08:00
name: Jeremy Brayton
avatar: https://disqus.com/api/users/avatars/Jeremy Brayton.jpg
message: <p>The goal of the data storage should be an API that exposes potentially any medium. The main problem with the XML file approach is an XML file is text. If you look at your cache items, there can be upwards of many megs of text files. XML has to parse the entire file too, so much of the "problem" is simply that you're parsing an entire file for probably 2 bytes of data. <br><br><br><br>Having most of the information stored in a SQL database where you just have to read rows would be a little more ideal. You wouldn't have to parse entire files, but specific rows. Hell with properly constructed SQL your cached information wouldn't be parsed in it's entirety. You'd just see the latest chunks you need.<br><br><br><br>You could probably solve much of the XML problem by splitting up the cache into what's necessary vs. what's actually cached data. Separating the read and unread items into different cache files would be a step up. This way when you get new items to the feed, you're parsing a small subset of the entire cache. If you still want to view every post you can but it'll take more time because of the nature of what's being cached. By doing this, you may introduce an even greater performance hit so it'd be difficult to tell if this is beneficial over the current method. Having an indexing system might not hurt for what can be indexed as well, so you're hitting those cache files less. <br><br><br><br>A SQL backend would handle much of this but it's difficult to handle a SQL database with an application. The best way to handle SQL would be to define the database schema and let the client (me) choose which RDBMS to implement. I could use the existing MSDE/SQLLite/MySQL installer or I could use my own database platform and plug RSS Bandit into it. I would just have to implement my own DataAdapter plugin to make it connect to the backend of my choice.</p>
