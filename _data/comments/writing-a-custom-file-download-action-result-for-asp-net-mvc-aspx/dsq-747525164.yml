id: dsq-747525164
date: 2010-11-14T16:40:38.0000000-08:00
name: Patrick barry
avatar: https://disqus.com/api/users/avatars/Patrick barry.jpg
message: '<p>public class DownLoadZipFile : ActionResult<br>    {<br>        public string FileDownloadName { get; set; }<br>        public List&lt;string&gt; ZipFileList { get; set; }<br>        public DownLoadZipFile()<br>        {<br>        }<br>        public DownLoadZipFile(string fileDownloadName, List&lt;string&gt; zipFileList)<br>        {<br>            FileDownloadName = fileDownloadName;<br>            ZipFileList = zipFileList;<br>        }<br><br>        public override void ExecuteResult(ControllerContext context)<br>        {<br>            if (!String.IsNullOrEmpty(FileDownloadName))<br>            {<br>                var response = context.HttpContext.Response;<br>                response.Clear();<br>                response.AddHeader("content-disposition", "attachment; filename=" + this.FileDownloadName);<br>                response.ContentType = "application/zip";<br>                //response.ContentType = "application/octet-stream";<br>                response.CacheControl = "Private";<br>                response.Cache.SetExpires(DateTime.Now.AddMinutes(3));<br>            }<br>            DownloadZipToBrowser(context);<br>        }<br>        public void DownloadZipToBrowser(ControllerContext context)<br>        {<br>            ZipOutputStream zipOutputStream = null;<br>            var response = context.HttpContext.Response;<br>            try<br>            {<br>                byte[] buffer = new byte[4096];<br>                zipOutputStream = new ZipOutputStream(response.OutputStream);<br>                zipOutputStream.SetLevel(3); //0-9, 9 being the highest level of compression<br>                foreach (string fileName in ZipFileList)<br>                {<br>                    Stream fs = File.OpenRead(fileName);<br>                    ZipEntry entry = new ZipEntry(Path.GetFileName(fileName));<br>                    entry.Size = fs.Length;<br>                    zipOutputStream.PutNextEntry(entry);<br>                    int count = fs.Read(buffer, 0, buffer.Length);<br>                    while (count &gt; 0)<br>                    {<br>                        zipOutputStream.Write(buffer, 0, count);<br>                        count = fs.Read(buffer, 0, buffer.Length);<br>                        if (!response.IsClientConnected)<br>                        {<br>                            break;<br>                        }<br>                        response.Flush();<br>                    }<br>                    fs.Close();<br>                }<br>            }<br>            catch (Exception ex)<br>            {<br>                Logging.WriteError(ex);<br>            }<br>            finally<br>            {<br>                if (zipOutputStream != null)<br>                    zipOutputStream.Close();<br>                response.Flush();<br>                response.End();<br>            }<br>        }<br>    }</p>'
