id: dsq-747519066
date: 2012-01-02T06:46:44.0000000-08:00
name: Doug McDonald
avatar: https://disqus.com/api/users/avatars/Doug McDonald.jpg
message: <p>I take the point that software in its purest sence doesn't cope with ambiguity (flipping bits etc) but I would suggest that software design does just that. <br>Writing code which can cope with users requiring new categories for example is a basic example illustrating this point. You 'could' hard code the category values 'cat, 'dog' and 'fish' as they are explicitely in the spec, but isn't it our place as developers to read beyond the spec and think 'hmm, perhaps at a later date the user might want a rabbit? this would be better placed as a lookup value/table'?<br>We are taking a best guess that the spec is incomplete, or subject to change, using our experience to manage the potential ambiguity in the way we write the system. Yes we want to avoid additional work up front especially if it's not required, but certain specs are easier to second guess than to spend hours trying to define a finite list of 'pets' in this example.<br>Overall, I would firmly agree with the need to ask the right questions throughout, but I would also say that certain design choices themselves can help reduce the impact of incomplete specs and manage the need to pester the customer with every last detail.<br></p>
