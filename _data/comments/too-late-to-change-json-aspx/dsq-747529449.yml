id: dsq-747529449
date: 2009-06-26T11:25:00.0000000-07:00
name: Haacked
avatar: https://github.com/haacked.png?size=120
message: <p>@Douglas First of all, let me say I watched all your JavaScript videos on YUI Theater and bought your book and am a big fan. It gave me a deep appreciation for JavaScript I didn't have before. Thus <a href="http://m.youtube.com/watch?v=-FucbvoFFy0&amp;client=mv-google&amp;gl=US&amp;hl=en" rel="nofollow noopener" title="Wayne's World Not Worthy">this video sums up my feeling</a> of having you comment on this topic. I hope you actually return to read this comment. :)<br>I'm happy to hear this issue is fixed in EcmaScript 5, though I worry it may be a while before we see that adopted.<br>Regarding your second point, I agree. However, as I pointed out, there's a very subtle variant of the attack made possible by caching implementation.<br>For example, the bits will always be delivered at some point for legitimate reasons, or why even have the service?  So the unsuspecting user visits the vulnerable site and legitimately requests the JSON array. At that point, the data is potentially cached by buggy browsers and buggy proxy servers. When the browser makes the request initiated by the SCRIPT tag, <em><strong>the server is no longer involved in fulfilling that request</strong></em>.<br>Given that scenario, how would securing the data on the server have any affect? The data was delivered long before in response to a legitimate authenticated request.<br>It may seem I'm hypothesizing here, but these are based on real world scenarios that the ASP.NET team has experienced. As framework developers, we want to find the right balance of usability and helping developers protect themselves.<br>I agree that developers should take responsibility for their data, but as you can see in the comments to this post and the previous post, this particular issue is very subtle and even now, most developers (who are very smart) don't have a grasp of it. After all, it bit the Gmail team in the past. If Google got bit, how can we expect us mere mortals to get it right <em>every time</em>. Because the hackers definitely understand the issue, and it only takes one of them.<br>This is why I'm writing about the subject and posing hypothetical solutions in the interest of testing my own knowledge of the issue, as well as a means of making people aware of it. As for the ASP.NET MVC framework, we may end up with requiring POST with an option to switch to GET for those who know what they are doing as there doesn't seem any other safe option.</p>
